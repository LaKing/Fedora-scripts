#!/bin/bash
# Last update:2014.07.14-20:25:50
# version 1.31.3
#
# Server Controll script for Fedora with LXC containers
#
# D250 Laboratories / D250.hu
# Author: István király
# LaKing@D250.hu
# 
## Source URL
#URL="https://raw.githubusercontent.com/LaKing/Fedora-scripts/master/srvctl"

## If user is root or runs on root privileges, continiue. (TODO: userspace implementation)
if [ "$UID" -ne "0" ]
then
  echo "Root privileges needed to run this script."
  ## Attemt to get root privileges with sudo, and run the script
  ## sudo bash $0 $1 $2 $3 $4 $5 $6 $7 $8 $9
  exit
fi

####################################################
## Some init stuff

## some formatted date 
NOW=$(date +%Y.%m.%d-%H:%M:%S)
MSG="## srvctl modification. $NOW"


####################################################
## Configuration defaults - Overwritten in config!
##
##(TODO: or rpm / yum if latest version will be available in a repo, so not yet .)

## srvctl config 
## Use with "" if value contains spaces.

## use latst version or the keyword 'git' 
LXC_VERSION=1.0.4

## logfile
LOG=/var/log/srvctl.log

## temporal backup and work directory
TMP=/temp

## The main /srv folder mount point - SSD recommended
SRV=/srv

## Used for certificate generation - do not leave it empty in config file.
ssl_password=no_pass

## Company codename - use your own
CMP=Unknown

## Company domain name - use your own
CDN=Unknown

## CC as Certificate creation
CCC=HU
CCST=Hungary
CCL=Budapest

## IPv4 Address of the host
HOSTIPv4=127.0.0.1

## IPv6 address of the host
HOSTIPv6=::1

## IPv6 address range base
RANGEv6=::1
PREFIXv6=64

## File to share this system's VE domains to ns servers - http share recommended
dns_share=/root/dns.tar.gz


#### the following options are exported to containers, when they get created..

## for php.ini in containers
php_timezone=Europe/Budapest



##########################################################
## These where the sourceable variables - used in update-install too!
## Import custom configuration directives now, t oapply customized variables.
source /etc/srvctl/config 2> /dev/null
##
##########################################################

## Some way to figure out, .. is this script running in the srvctl container, or on the host system?
if mount | grep -q 'on /var/srvctl' 
then
  ## We are in a container of srvctl for sure
  #echo CONTAINER $(hostname)
  onHS=false
  onVE=true
else
  ## We are propably on the host
  #echo HOST $(hostname)
  onHS=true
  onVE=false
fi

##we use the format srvctl  command arguemt [arguments]
CMD=$1
ARG=$2
## Current start directory
CSD=$(pwd)

cd /root

## Lablib functions

## constants


## MYSQL / MARIADB conf file that stores the mysql root password - in containers
MDF=/etc/mysqldump.conf

## global variables with default values
all_arg_set=false


green='\e[32m'
red='\e[31m'
blue='\e[34m'
yellow='\e[33m'

NC='\e[0m' # No Color

function bak {
    ## create a backup of the file, with the same name, same location .bak extension
    ## filename=$1
if [ -f $1 ]
then	
    echo $MSG" (bak)" >> $1.bak
    cat $1 >> $1.bak
    #echo $1" has a .bak file"
fi
}

function set_file {
    ## cerate a file with the content overwriting everything
    ## filename=$1 content=$2

    if [ -f $1 ];
     then bak $1
    fi
    #echo "creating "$1
    echo "$2" > $1
}

function sed_file {
    ## used to replace a line in a file
    ## filename=$1 oldline=$2 newline=$3
    bak $1
    cat $1 > $1.tmp
    sed "s|$2|$3|" $1.tmp > $1
    rm $1.tmp
}

function add_conf {
    ## check if the content string is present, and add if necessery. Single-line content only.
    ## filename=$1 content=$2

    if grep -q "$2" $1; then
     echo ''
     #echo $1" already has "$2
    else
     #echo "adding "$2
      if [ -f $1 ];
       then bak $1
      fi
     echo "$2" >> $1
    fi
}

function msg {
    ## create a log entry
    echo -e ${green}$1${NC}
}

function log {
    ## create a log entry
    echo -e ${yellow}$1${NC}
    echo $NOW': '$1 >> $LOG
}

function err {
    ## create a log entry
    echo -e ${red}$1${NC}
    echo $NOW': '$1 >> $LOG
    SUCC=$SUCC" "$1
}


## Lablib functions end here.

log "[$(whoami)@$(hostname) $(pwd)]# $0 $1 $2 $3 $4 $5 $6 $7 $8 $9"

SUCC=""
HINT="Usage:	srvctl command [argument]

The list of supported commands:"


if $onHS
then
	if [ -z $(echo $LD_LIBRARY_PATH | grep '/usr/local/lib') ]
	then
		export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
	fi
fi

## hint provides a sort of help functionality
function hint {

HINT=$HINT" 
  $1	$2"

} 

## this is used at the end of command-blocks, to confirm command success or failure.
function ok {
SUCC=" "
}

## srvctl functions

function argument {

if [ -z "$ARG" ]
then
    if [ "$1" == "C" ]
	then
	  err "No container-name supplied .."
	else
          err "No $1 supplied .."
	fi
    exit
fi

## this might need further tests or investigation.
## TODO check if this is waterproof
eval $1=$ARG

}

function to_ip {

	local __counter=$1
	local __c=$(( 1 + $__counter / 250 ))
	local __d=$(( 1 + $__counter % 250 ))

	## return
	echo $__c"."$__d
}

function to_mac {

	local __counter=$1
	local __c=$(( 1 + $__counter / 250 ))
	local __d=$(( 1 + $__counter % 250 ))

	## return
	echo $(printf '%x\n'  $__c)":"$(printf '%x\n'  $__d)
}





function create_certificate { ## for container $C

	## Prepare self-signed Certificate creation
	msg "Create certificate for $C."

	mkdir $SRV/$C/cert

	ssl_days=1085
	ssl_random=$SRV/$C/cert/random.txt
	ssl_config=$SRV/$C/cert/$C.txt
	ssl_key=$SRV/$C/cert/$C.key
	ssl_org=$SRV/$C/cert/$C.key.org
	ssl_crt=$SRV/$C/cert/$C.crt
	ssl_csr=$SRV/$C/cert/$C.csr
	ssl_pem=$SRV/$C/cert/$C.pem

	set_file $ssl_config "       RANDFILE               = $ssl_random

        [ req ]
        default_bits           = 2048
        default_keyfile        = keyfile.pem
        distinguished_name     = req_distinguished_name
        attributes             = req_attributes
        prompt                 = no
        output_password        = $ssl_password

        [ req_distinguished_name ]
        C                      = $CCC
        ST                     = $CCST
        L                      = $CCL
        O                      = $CMP
        OU                     = $CMP CA
        CN                     = $C
        emailAddress           = webmaster@$C

 	[ req_attributes ]
        challengePassword              = A challenge password"

	#### create certificate for https ### good howto: http://www.akadia.com/services/ssh_test_certificate.html	

	## Step 1: Generate a Private Key
	openssl genrsa -des3 -passout pass:$ssl_password -out $ssl_key 2048

	## Step 2: Generate a CSR (Certificate Signing Request)
	openssl req -new -passin pass:$ssl_password -passout pass:$ssl_password -key $ssl_key -out $ssl_csr -days $ssl_days -config $ssl_config
	
	## Step 3: Remove Passphrase from Key
	cp $ssl_key $ssl_org
	openssl rsa -passin pass:$ssl_password -in $ssl_org -out $ssl_key	
	
	## Step 4: Generating a Self-Signed Certificate
	## later on, use signed certificates, eg. verisign, startssl or netlock.hu
	## To use your own CA openssl ca -batch -out $ssl_crt -config /etc/pki/[YOU_AS_CA]/openssl.cnf -passin pass:[YOU_AS_CA_PASS] -in $ssl_csr
	## We will generate now a self-signed certificate
	openssl x509 -req -days $ssl_days -passin pass:$ssl_password  -in $ssl_csr -signkey $ssl_key -out $ssl_crt

	## create a certificate keychain in pem format
	cat $ssl_key >  $ssl_pem
	cat $ssl_crt >> $ssl_pem

}




function create_keypair { ## for user $U

	mkdir /home/$U/.ssh

	## create ssh keypair
	if [ ! -f /home/$U/.ssh/id_rsa.pub ]; then
	   ssh-keygen -t rsa -b 4096 -f /home/$U/.ssh/id_rsa -N '' -C $U@@$(hostname)
	fi

	chown -R $U:$U /home/$U/.ssh
	chmod -R 600 /home/$U/.ssh
	chmod    700 /home/$U/.ssh
}

function get_password {

	## TODO make hash based password eventually? ...

	## You may want to add your own sillyables, or faorite characters and customy security measures.
	declare -a pwarra=("B" "C" "D" "F" "G" "H" "J" "K" "L" "M" "N" "P" "R" "S" "T" "V" "Z")
	pwla=${#pwarra[@]}

	declare -a pwarrb=("a" "e" "i" "o" "u")
	pwlb=${#pwarrb[@]}	

	declare -a pwarrc=("" "." ":" "@" ".." "::" '@@')
	pwlc=${#pwarrc[@]}

	p=''
	p=$p${pwarra[$(( RANDOM % $pwla ))]}
	p=$p${pwarrb[$(( RANDOM % $pwlb ))]}
	p=$p${pwarra[$(( RANDOM % $pwla ))]}
	p=$p${pwarrb[$(( RANDOM % $pwlb ))]}
	# p=$p${pwarrc[$(( RANDOM % $pwlc ))]}
	p=$p${pwarra[$(( RANDOM % $pwla ))]}
	p=$p${pwarrb[$(( RANDOM % $pwlb ))]}
	p=$p${pwarra[$(( RANDOM % $pwla ))]}
	p=$p${pwarrb[$(( RANDOM % $pwlb ))]}

	## return passowrd
	password="$p"

}

function add_user {

_u=$1

  if [ ! -d "/home/$_u" ]; then
	get_password

	adduser $_u
	echo $password | passwd $_u --stdin

	## Since this is a generated password, we add a note about it for the user?
	echo $password > /home/$_u/.password

	log "User: $_u password: $password set on $(hostname)"

	create_keypair

  fi
}

function set_file_limits {

    ## You can increase the amount of open files and thus the amount of client connections by using "ulimit -n ". 
    ## For example, to allow pound to accept 5,000 connections and forward 5,000 connection to back end servers (10,000 total) use "ulimit -n 10000".
    ulimit -n 100000

    ## Hint from Tamás Papp to fix Error: Too many open files
    sysctl fs.inotify.max_user_watches=81920 >> /dev/null
    sysctl fs.inotify.max_user_instances=1024 >> /dev/null
}

function create_named_zone {

	## argument domain ($C or alias)
	D=$1

	mkdir -p /var/named/srvctl
	chown -R named:named /var/named/srvctl

	named_conf=/var/named/srvctl/$D.conf
	named_slave_conf=/var/named/srvctl/$D.slave.conf
	named_zone=/var/named/srvctl/$D.zone

	if [ ! -f $named_conf ]
	then
## TODO convert to single string and command, this is ugly.
		echo '## srvctl named.conf '$D > $named_conf
		echo 'zone "'$D'" {' >> $named_conf
		echo '	type master;'  >> $named_conf
		echo '	file "'$named_zone'";' >> $named_conf
		echo '};' >> $named_conf
	fi

	if [ ! -f $named_slave_conf ]
	then
		echo '## srvctl named.slave.conf '$D > $named_slave_conf
		echo 'zone "'$D'" {' >> $named_slave_conf
		echo '	type slave;'  >> $named_slave_conf
		echo '	masters {'$HOSTIPv4';};'  >> $named_slave_conf
		echo '	file "'$named_zone'";' >> $named_slave_conf
		echo '};' >> $named_slave_conf
	fi

	if [ ! -f $named_zone ]
	then
		

		serial_file=/var/named/serial-counter.txt

		if [ ! -f $serial_file ]
		then
		  serial='1'	
		  echo $serial > $serial_file
		else	
		  serial=$(($(cat $serial_file)+1))
		  echo $serial >  $serial_file
		fi

		set_file $named_zone '$TTL 1D
@	IN SOA	@ hostmaster.'$CDN'. (
					'$serial'	; serial
					1D	; refresh
					1H	; retry
					1W	; expire
					3H )	; minimum
	IN 	NS	ns1.'$CDN'
	IN 	NS	ns2.'$CDN'
*	IN 	A	'$HOSTIPv4'
@	IN 	A	'$HOSTIPv4'
@	IN	MX	10	mail
	AAAA	::1'

## TODO add IPv6 support

	fi

	chown named:named $named_conf
	chown named:named $named_slave_conf
	chown named:named $named_zone

	## TODO create a nice file structure and re-enable this.
	#if [ ! -L $SRV/$C/$D.named.conf ]
	#then
	#   ln -s $named_conf $SRV/$C/$D.named.conf
	#fi

	#if [ ! -L $SRV/$C/$D.named.zone ]
	#then
	#   ln -s $named_zone $SRV/$C/$D.named.zone
	#fi
}

function  get_randomstr {
    randomstr=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
}

function msg_yum_version_installed {
    v=$(yum info $1 | grep -m1 Version)
    i=$(yum info $1 | grep -m1 installed)    
    msg "$1 ${v:13:8} ${i:13}"

}

function generate_lxc_config {

## argument container name.
_c=$1

log ".. generating lxc configarion files for $_c"

_counter=$(cat $SRV/$_c/config.counter)

_mac=$(to_mac $_counter)
_ip4=$(to_ip $_counter)	

#lxc.network.type = veth
#lxc.network.flags = up
#lxc.network.link = inet-br
#lxc.network.hwaddr = 00:00:00:aa:'$_mac'
#lxc.network.ipv4 = 192.168.'$_ip4'/8
#lxc.network.name = inet-'$_counter'

set_file $SRV/$_c/config '## Template for srvctl created fedora container #'$_counter' '$_c' '$NOW'

lxc.network.type = veth
lxc.network.flags = up
lxc.network.link = srv-net
lxc.network.hwaddr = 00:00:10:10:'$_mac'
lxc.network.ipv4 = 10.10.'$_ip4'/8
lxc.network.name = srv-'$_counter'

lxc.network.ipv4.gateway = auto
#lxc.network.ipv6.gateway = auto

lxc.rootfs = '$SRV'/'$_c'/rootfs
lxc.include = /usr/local/share/lxc/config/fedora.common.conf
lxc.utsname = '$_c'
lxc.autodev = 1

lxc.mount = '$SRV'/'$_c'/fstab
'

echo "/var/srvctl $SRV/$_c/rootfs/var/srvctl none ro,bind 0 0" > $SRV/$_c/fstab

set_file $SRV/$_c/rootfs/etc/resolv.conf "# Generated by srvctl
search local
nameserver 10.10.0.1
"
echo "10.10."$_ip4 > $SRV/$C/config.ipv4

}





## srvctl functions end here.

##############################
##
##   COMMON FUNCTIONS
##
##############################

hint "version	" "Display what srvctl version we are using."
if [ "$CMD" == "version" ]
then
  msg "Kernel: "$(uname -r)
  ver=$(head $0 | grep "# version ")
  msg 'srvctl: '${ver:10}

  if $onHS
  then 

    msg 'LXC: '$(lxc-info --version)' installed'
    msg_yum_version_installed Pound
    msg_yum_version_installed postfix
    msg_yum_version_installed perdition
    msg_yum_version_installed bind
    msg_yum_version_installed clamav
  fi

ok
fi

hint "add-user USERNAME" "Add a new user to the system."
if [ "$CMD" == "add-user" ]
then

	argument U

	add_user $U

	if $onVE
	then 
		echo "This is the mailing system at $CDN, your account has been created." | mail -s "Welcome" $U
	fi
ok
fi ## adduser

## start or restart service
hint "restart SERVICE" "You can use this command to restart a certain service via systemctl."
if [ "$CMD" == "restart" ]
then
	argument service

	systemctl restart $ARG.service
	systemctl status  $ARG.service
	systemctl enable  $ARG.service

ok
fi ## start

############################
## 
##  SERVER SIDE FUNCTIONS
##
############################

if $onHS
then ## no identation.



hint "diagnose	" "Run a set of diagnostic commands."
if [ "$CMD" == "diagnose" ]
then
	msg "FULL STATUS MESSAGES"
	systemctl status pop3s.service
	systemctl status imap4s.service
	systemctl status imap4.service
	systemctl status saslauthd.service
	systemctl status postfix.service
	systemctl status pound.service

	msg "NETWORK PORTS and PROTOCOLLS"
	netstat -tulpn
	msg "POP3"
	netstat -np | grep ":995"
	msg "IMAP4S"
	netstat -np | grep ":993"
	msg "IMAP for SMTPS auth"
	netstat -np | grep ":143"
	msg "SMTPS"
	netstat -np | grep ":465"
	msg "SMTP"
	netstat -np | grep ":25"
	msg "SSH"
	netstat -np | grep ":22"
	msg "FTP"
	netstat -np | grep ":21"
	msg "HTTP"
	netstat -np | grep ":80"
	netstat -np | grep ":443"

	msg "CONNECTED SHELL USERS"
	w
ok
fi


hint "update-install [all]" "This will update srvctl, recompile LXC and update some related packages if necessery. Use 'all' to force to reinstall everything."
if [ "$CMD" == "update-install" ]
then

	if [ "$2" == "all" ]
	then
	   all_arg_set=true
	fi

	### srvctl

	## TODO create a srvctl file in /bin and ..
	# ln /bin/srvctl /var/srvctl

	if [ ! $0 == "/bin/srvctl" ]
	then
		msg "srvctl should be located at /bin/srvctl"
	fi

	## TODO yum -y update ?

	## TODO make sure networking is set and okay.
	# /etc/sysconfig/network-scripts/ifcfg-em1
	# /etc/sysconfig/network
	# systemctl stop NetworkManager.service
	# systemctl remove NetworkManager
	# systemctl enable network.service
	# systemctl start network.service

	mkdir -p /etc/srvctl

	if [ ! -f /etc/srvctl/config ]
	then
	
	get_password

set_file /etc/srvctl/config "## srvctl config 
## Use with "" if value contains spaces.

## use latst version or the keyword 'git' 
#LXC_VERSION=1.0.4

## logfile
#LOG=/var/log/srvctl.log

## temporal backup and work directory
#TMP=/temp

## The main /srv folder mount point - SSD recommended
#SRV=/srv

## Used for certificate generation - do not leave it empty in config file.
ssl_password=ssl_pass_$password

## Company codename - use your own
#CMP=Unknown

## Company domain name - use your own
#CDN=Unknown

## CC as Certificate creation
#CCC=HU
#CCST=Hungary
#CCL=Budapest

## IPv4 Address of the host
#HOSTIPv4=127.0.0.1

## IPv6 address of the host
#HOSTIPv6=::1

## IPv6 address range base
#RANGEv6=::1
#PREFIXv6=64

## File to share this system's VE domains to ns servers - http share recommended
#dns_share=/root/dns.tar.gz

#### the following options are exported to containers, when they get created..

## for php.ini in containers
#php_timezone=Europe/Budapest


"
	msg "Generated default /etc/srvctl/config for customization. Please edit, and restart the update-install process. Exiting."
	exit

	fi

## Requirement checks .--
## certificate
		if [ ! -f /root/crt.pem ]
		then
			err "Requirement-check, error: certificate check failed on /root/crt.pem - file not found. Exiting."
			exit
		fi

		if [ ! -f /root/key.pem ]
		then
			err "Requirement-check, error: certificate check failed on /root/key.pem - file not found. Exiting."
			exit
		fi

		if [ -f /root/ca-bundle.pem ]
		then
			no_ca_bundle_hashmark=''
			cert_status=$(openssl verify -CAfile /root/ca-bundle.pem /root/crt.pem | tail -n 1 | tail -c 3)

			if [ ! "$cert_status" == "OK" ]
			then
				err "Requirement-check, error: certificate check failed with /root/ca-bundle.pem /root/crt.pem - Exiting"
				exit

			fi
		else
			msg "No ca-bundle.pem found."
			no_ca_bundle_hashmark='#// '
			cert_status=$(openssl verify /root/crt.pem | tail -n 1 | tail -c 3)

			if [ ! "$cert_status" == "OK" ]
			then
				err "Requirement-check, error: certificate check failed. /root/crt.pem - Exiting"
				exit

			fi
		fi
## authorized keys. own hosts should have custom values that add into the config when regenerating.
		
		if [ ! -f /root/.ssh/own_hosts ] && [ -f /root/.ssh/known_hosts ]
		then
			cat /root/.ssh/known_hosts > /root/.ssh/own_hosts
		fi

## saslauthd

	if [ ! -f /root/saslauthd ]
	then
		msg "No custom saslauthd file detected. Attemt to download a compiled 64bit executable from d250.hu."
		wget -O /root/saslauthd http://d250.hu/scripts/bin/saslauthd
	fi

	if [ ! -f /root/saslauthd ]
	then
		err "Due to incompatibility of saslauthd <= 2.1.26 and perdition, a custom version of saslauthd is required, that has to be located at /root/saslauthd. Exiting."
		exit
	fi


## @update-install
if [ ! "$(lxc-info --version)" == "$LXC_VERSION" ] || $all_arg_set
then
log "Installing LXC!"

	## LXC is also part of docker-io
	#yum install docker-io
	    
	## lxc can be installed as rpm
	#yum -y install lxc lxc-templates

	## packages needed for compilation and for running
	log "Install Development Tools"
	yum -y groupinstall "Development Tools"
	yum -y install automake
	yum -y install graphviz
	yum -y install libcap-devel

	log "Install LXC "$LXC_VERSION

	cd /root
	if $all_arg_set
	then
		rm -rf lxc
	fi

	if [ "$LXC_VERSION" == "git" ]
	then
	  ## to compile it from source
	  git clone git://github.com/lxc/lxc

	else
		if [ ! -f /root/lxc/autogen.sh ]
		then
			  ## use a version-release
			  if [ ! -f /root/lxc-$LXC_VERSION.zip ] 
			  then 
			  	wget -O /root/lxc-$LXC_VERSION.zip https://github.com/lxc/lxc/archive/lxc-$LXC_VERSION.zip
			  fi
			  unzip /root/lxc-$LXC_VERSION.zip
			  mv /root/lxc-lxc-$LXC_VERSION /root/lxc
		fi
	fi

 
	cd /root/lxc

	log "LXC-building: autogen"
	./autogen.sh

	log "LXC-building: configure"
	./configure

	log "LXC-building: make"
	make

	log "LXC-building: install"
	make install

	add_conf /root/.bash_profile "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib"

	log "Configure libvirt network"

## Networking with libvirt
	yum -y install libvirt-daemon-driver-network libvirt-daemon-config-network libvirt-daemon-config-nwfilter

	## DHCP is only for manually created containers. srvctl containers should use static ip addresses.

	set_file /etc/libvirt/qemu/networks/default.xml '<network>
  <name>default</name>
  <uuid>00000000-0000-aaaa-aaaa-aaaaaaaaaaaa</uuid>
  <bridge name="inet-br"/>
  <mac address="00:00:00:AA:AA:AA"/>
  <forward/>
  <ip address="192.168.0.1" netmask="255.255.0.0">
    <dhcp>
      <range start="192.168.0.2" end="192.168.0.254"/>
    </dhcp>
  </ip>
</network>
'

set_file /etc/libvirt/qemu/networks/primary.xml '<network>
  <name>primary</name>
  <uuid>00000000-0000-2010-0010-000000000001</uuid>
  <bridge name="srv-net"/>
  <mac address="00:00:10:10:00:01"/>
  <forward/>
  <ip address="10.10.0.1" netmask="255.255.0.0"></ip>
</network>
'

## TODO, .. set a new bridge for ipv6

	ln -s /etc/libvirt/qemu/networks/primary.xml /etc/libvirt/qemu/networks/autostart/primary.xml 2> /dev/null

	systemctl enable libvirtd.service
	systemctl start  libvirtd.service
	systemctl status libvirtd.service

	#### RESTART REQUIRED HERE, if libvirt networks got modified.
	if ! $all_arg_set
	then
		log "LXC Installed. Restart required. Please run this command again after a reboot to continiue. Exiting."
		exit
	fi

else
msg "LXC is OK! ($LXC_VERSION)"
fi ## Install LXC

## @update-install

	## srvctl

	## TODO change counter location to /var/srvctl/counter
	if [ -f /etc/srvctl/counter ]
	then
	 msg "Counter exists, counting at "$(cat /etc/srvctl/counter)
	else
	 log "Counter does not exist. Creating."
	 echo '0' > /etc/srvctl/counter
	fi

	## make sure srvctl enviroment directories exists
	mkdir -p $SRV
	mkdir -p $TMP
	mkdir -p /var/srvctl/share
	mkdir -p /etc/srvctl

	## this will save a little space. 
	## TODO: I'm not a distro engineer, but I think there is space for optimalisation. Move locale-archive to shar efolder

	if [ ! -f /var/srvctl/locale-archive ]
	then
	 log "Shared local archive does not exist. Copying from host."
	 cp /usr/lib/locale/locale-archive /var/srvctl
	fi


	## default path for containers
	add_conf "/usr/local/etc/lxc/lxc.conf" "lxc.lxcpath=$SRV" 

	## just in case
	bak /etc/hosts

	## create ssh key for root
	if [ ! -f /root/.ssh/id_rsa.pub ]
	then
	  ssh-keygen -t rsa -b 4096 -f /root/.ssh/id_rsa -N ''
	  log "Created ssh keypair for root."
	fi



	## Customisations in our template
	fedora_template=/usr/local/share/lxc/templates/lxc-fedora
	srvctl_template=/usr/local/share/lxc/templates/lxc-fedora-srv

## @update-install
##if [ ! -f $fedora_template ] || $all_arg_set
if true
then
	log "Create Custom template"

	set_file $srvctl_template '#!/bin/bash

	## You may want to add your own sillyables, or faorite characters and customy security measures.
	declare -a pwarra=("B" "C" "D" "F" "G" "H" "J" "K" "L" "M" "N" "P" "R" "S" "T" "V" "Z")
	pwla=${#pwarra[@]}

	declare -a pwarrb=("a" "e" "i" "o" "u")
	pwlb=${#pwarrb[@]}	

	declare -a pwarrc=("" "." ":" "@" ".." "::" "@@")
	pwlc=${#pwarrc[@]}

	p=''
	p=$p${pwarra[$(( RANDOM % $pwla ))]}
	p=$p${pwarrb[$(( RANDOM % $pwlb ))]}
	p=$p${pwarra[$(( RANDOM % $pwla ))]}
	p=$p${pwarrb[$(( RANDOM % $pwlb ))]}
	# p=$p${pwarrc[$(( RANDOM % $pwlc ))]}
	p=$p${pwarra[$(( RANDOM % $pwla ))]}
	p=$p${pwarrb[$(( RANDOM % $pwlb ))]}
	p=$p${pwarra[$(( RANDOM % $pwla ))]}
	p=$p${pwarrb[$(( RANDOM % $pwlb ))]}

	root_password=$p

'
	chmod 755 $srvctl_template

	cat $fedora_template >> $srvctl_template
	## cosmetical TODO remove second #!/bin/bash

	## disable the root password redefining force
	sed_file $srvctl_template 'chroot $rootfs_path passwd -e root' '## srvctl-disabled: chroot $rootfs_path passwd -e root'
	sed_file $srvctl_template 'Container rootfs and config have been created.' 'Container rootfs and config have been created."'
	## and do not display the dialog for that subject
	sed_file $srvctl_template 'Edit the config file to check/enable networking setup.' 'exit 0'

	## Add additional default packages 
	sed_file $srvctl_template '    PKG_LIST="yum initscripts passwd rsyslog vim-minimal openssh-server openssh-clients dhclient chkconfig rootfiles policycoreutils fedora-release"' '    PKG_LIST="yum initscripts passwd rsyslog vim-minimal openssh-server openssh-clients dhclient chkconfig rootfiles policycoreutils fedora-release mc httpd postfix mailx sendmail unzip clucene-core make openssl rsync nfs-utils"'

	## wordpress mariadb mariadb-server postfix mailx sendmail dovecot .. 

	## TODO Dovecot fails with
	##  warning: %post(dovecot-1:2.2.13-1.fc20.x86_64) scriptlet failed, exit status 1
	## Non-fatal POSTIN scriptlet failure in rpm package 1:dovecot-2.2.13-1.fc20.x86_64
	## therefore it should be installed once the container started.

	## httpd needs to be installed here, other wise it failes with cpio set_file_cap error.redsnapper921


	## After modifocation of the last line, in a live filesystem, /usr/local/var/cache/lxc/fedora needs to be purged.
	log "Clearing yum cache for container creation."
	rm -rf /usr/local/var/cache/lxc/fedora


fi ## if fedora_template does not exists.

## @update-install



## TODO / ISSUE : dovecot can not be added, as it freezes the install process


	##log "Install Pound Reverse Proxy for HTTP" 



if [ ! -f /etc/pound.cfg ] || $all_arg_set
then
	## Pound is a reverse Proxy for http
	yum -y install Pound

	set_file /etc/pound.cfg '## srvctl pound.cfg
User "pound"
Group "pound"
Control "/var/lib/pound/pound.cfg"

## Default loglevel is 1
LogFacility local0
LogLevel    2

ListenHTTP

    Address 0.0.0.0
    Port    80

    Err414 "/var/www/html/414.html"
    Err500 "/var/www/html/500.html"
    Err501 "/var/www/html/501.html"
    Err503 "/var/www/html/503.html"

    Include "/var/pound/http-includes.cfg"

End
ListenHTTPS

    Address 0.0.0.0
    Port    443

    Err414 "/var/www/html/414.html"
    Err500 "/var/www/html/500.html"
    Err501 "/var/www/html/501.html"
    Err503 "/var/www/html/503.html"

    ## The certificate from root.
    Cert "/etc/pound/pound.pem"

    Include "/var/pound/https-includes.cfg"


End

## Include the default host here, as a fallback.
# Include "/srv/default-host/pound"
'
	## certificate chainfile
	mkdir -p /etc/pound
	

	cat /root/crt.pem > /etc/pound/crt.pem
	cat /root/key.pem > /etc/pound/key.pem
	cat /root/ca-bundle.pem > /etc/pound/ca-bundle.pem

	cat /root/crt.pem > /etc/pound/pound.pem
	echo '' >> /etc/pound/pound.pem
	cat /root/key.pem >> /etc/pound/pound.pem
	echo '' >> /etc/pound/pound.pem
	cat /root/ca-bundle.pem >> /etc/pound/pound.pem


	mkdir -p /var/pound

	#  echo $MSG >> /etc/srvctl/pound-include-ca.cfg
	#  echo 'CAlist "/etc/srvctl/ca-bundle.pem"' >> /etc/srvctl/pound-include-ca.cfg
	## TODO check for /etc/pki maybe?

	## The pound-served custom error documents

set_file /var/www/html/414.html '<head></head><body bgcolor="#333"><div id="header" style="background-color:#151515;"><img src="http://'$CDN'/logo.png" alt="'"$CMP"'" style="display: block; margin-left: auto; margin-right: auto; vertical-align: middle"></div><p align="center"><font color="#aaa" style="margin-left: auto; margin-right: auto" size="6px" face="Arial">
<b>Error 414</b> @ '$(hostname)'<br />
Request URI is too long.
</font><p></body>'

set_file /var/www/html/500.html '<head></head><body bgcolor="#333"><div id="header" style="background-color:#151515;"><img src="http://'$CDN'/logo.png" alt="'"$CMP"'" style="display: block; margin-left: auto; margin-right: auto; vertical-align: middle"></div><p align="center"><font color="#aaa" style="margin-left: auto; margin-right: auto" size="6px" face="Arial">
<b>Error 500</b> @ '$(hostname)'<br />
An internal server error occurred. Please try again later.
</font><p></body>'

set_file /var/www/html/501.html '<head></head><body bgcolor="#333"><div id="header" style="background-color:#151515;"><img src="http://'$CDN'/logo.png" alt="'"$CMP"'" style="display: block; margin-left: auto; margin-right: auto; vertical-align: middle"></div><p align="center"><font color="#aaa" style="margin-left: auto; margin-right: auto" size="6px" face="Arial">
<b>Error 501</b> @ '$(hostname)'<br />
Request URI is too long.
</font><p></body>'

set_file /var/www/html/503.html '<head></head><body bgcolor="#333"><div id="header" style="background-color:#151515;"><img src="http://'$CDN'/logo.png" alt="'"$CMP"'" style="display: block; margin-left: auto; margin-right: auto; vertical-align: middle"></div><p align="center"><font color="#aaa" style="margin-left: auto; margin-right: auto" size="6px" face="Arial">
<b>Error 503</b> @ '$(hostname)'<br />
The service is not available. Please try again later.
</font><p></body>'


	if [ ! -f /var/www/html/favicon.ico ] || $all_arg_set
	then
	   msg "Downloading favicon.ico from $CDN"
	   #wget -O /var/www/html/favicon.ico http://$CDN/favicon.ico
	fi

	if [ ! -f /var/www/html/logo.png ] || $all_arg_set
	then
	   msg "Downloading logo.png from $CDN" 
	   #wget -O /var/www/html/logo.png http://$CDN/logo.png
	fi

	if [ ! -f /var/www/html/favicon.ico ]
	then
	   err "No favicon.ico from could be located."
	fi

	if [ ! -f /var/www/html/logo.png ]
	then
	   err "No logo.png from could be located."
	fi

## Pound logging. By default pound is logging to systemd-journald.
## To work with logs, use rsyslog to export to /var/log/pound

	yum -y install rsyslog

	add_conf /etc/rsyslog.conf 'local0.* 			-/var/log/pound'

	systemctl restart rsyslog.service


	systemctl stop pound.service
	systemctl enable pound.service
	systemctl start pound.service
	systemctl status pound.service


fi ## install pound

	## Dev-note .. I was worried that unencrypted http between the host and a container can be sniffed from another container.
	## My attempts to do so, did not work, therefore I kept this concept of the containers sitting together on srv-net with static IP's


## @update-install
set_file_limits

### E-mail
## Postfix
if [ ! -f /etc/postfix/main.cf ] || $all_arg_set
then
	log "Installing the Postfix mail subsystem."

	yum -y install postfix

	pc=/etc/postfix/main.cf

	sed_file $pc 'inet_interfaces = localhost' '#inet_interfaces # localhost'


	if grep -q  '## srvctl postfix configuration directives' $pc; then
	 log "Skipping Postfix configuration, as it seems to be configured."
	else
		bak $pc

		echo '
## srvctl postfix configuration directives
## RECIEVING

## Listen on ..
inet_interfaces = all

## use /etc/hosts instead of dns-query
lmtp_host_lookup = native
smtp_host_lookup = native
## in addition, this might be enabled too.
# smtp_dns_support_level = disabled

## dont forget to postmap /etc/postfix/relaydomains
relay_domains = $mydomain, hash:/etc/postfix/relaydomains

## SENDING
## SMTPS
'$no_ca_bundle_hashmark'smtpd_tls_CAfile =    /etc/postfix/ca-bundle.pem
smtpd_tls_cert_file = /etc/postfix/crt.pem
smtpd_tls_key_file =  /etc/postfix/key.pem
smtpd_tls_security_level = may
smtpd_use_tls = yes

## We use cyrus for PAM authentication of local users
smtpd_sasl_type = cyrus

## We could use dovecot too.
#smtpd_sasl_type = dovecot
#smtpd_sasl_path = private/auth

smtpd_sasl_auth_enable = yes
smtpd_sasl_authenticated_header = yes
smtpd_recipient_restrictions = permit_mynetworks, permit_sasl_authenticated
##, check_recipient_access, reject_unauth_destination
smtpd_sasl_local_domain = '$CDN'

## Max 25MB mail size
message_size_limit=26214400 
' >> $pc
	fi ## add postfix directives

	echo '# srvctl postfix relaydomains' >> /etc/postfix/relaydomains


set_file /etc/postfix/master.cf '
# Postfix master process configuration file. (minimized) 
# ==========================================================================
# service type  private unpriv  chroot  wakeup  maxproc command + args
#               (yes)   (yes)   (yes)   (never) (100)
# ==========================================================================
smtp      inet  n       -       n       -       -       smtpd
smtps     inet  n       -       n       -       -       smtpd
  -o syslog_name=postfix/smtps
  -o smtpd_tls_wrappermode=yes
  -o smtpd_sasl_auth_enable=yes
  -o smtpd_reject_unlisted_recipient=no
  -o smtpd_recipient_restrictions=permit_sasl_authenticated,reject
pickup    unix  n       -       n       60      1       pickup
cleanup   unix  n       -       n       -       0       cleanup
qmgr      unix  n       -       n       300     1       qmgr
tlsmgr    unix  -       -       n       1000?   1       tlsmgr
rewrite   unix  -       -       n       -       -       trivial-rewrite
bounce    unix  -       -       n       -       0       bounce
defer     unix  -       -       n       -       0       bounce
trace     unix  -       -       n       -       0       bounce
verify    unix  -       -       n       -       1       verify
flush     unix  n       -       n       1000?   0       flush
proxymap  unix  -       -       n       -       -       proxymap
proxywrite unix -       -       n       -       1       proxymap
smtp      unix  -       -       n       -       -       smtp
relay     unix  -       -       n       -       -       smtp
showq     unix  n       -       n       -       -       showq
error     unix  -       -       n       -       -       error
retry     unix  -       -       n       -       -       error
discard   unix  -       -       n       -       -       discard
local     unix  -       n       n       -       -       local
virtual   unix  -       n       n       -       -       virtual
lmtp      unix  -       -       n       -       -       lmtp
anvil     unix  -       -       n       -       1       anvil
scache    unix  -       -       n       -       1       scache
'

	cat /root/ca-bundle.pem > /etc/postfix/ca-bundle.pem
	cat /root/crt.pem > /etc/postfix/crt.pem
	cat /root/key.pem > /etc/postfix/key.pem

	postmap /etc/postfix/relaydomains
	systemctl enable postfix.service
	systemctl start postfix.service


fi ## postfix
## @update-install


if [ ! -f /etc/aliases.db ] || $all_arg_set
then

log "Set /etc/aliases.db"

## We will mainly use these files to copy over to clients. Main thing is: info should not be aliased.
set_file /etc/aliases '
#
#  Aliases in this file will NOT be expanded in the header from
#  Mail, but WILL be visible over networks or from /bin/mail.
#
#	>>>>>>>>>>	The program "newaliases" must be run after
#	>> NOTE >>	this file is updated for any changes to
#	>>>>>>>>>>	show through to sendmail.
#

# Basic system aliases -- these MUST be present.
mailer-daemon:	postmaster
postmaster:	root

# General redirections for pseudo accounts.
bin:		root
daemon:		root
adm:		root
lp:		root
sync:		root
shutdown:	root
halt:		root
mail:		root
news:		root
uucp:		root
operator:	root
games:		root
gopher:		root
ftp:		root
nobody:		root
radiusd:	root
nut:		root
dbus:		root
vcsa:		root
canna:		root
wnn:		root
rpm:		root
nscd:		root
pcap:		root
apache:		root
webalizer:	root
dovecot:	root
fax:		root
quagga:		root
radvd:		root
pvm:		root
amandabackup:	root
privoxy:	root
ident:		root
named:		root
xfs:		root
gdm:		root
mailnull:	root
postgres:	root
sshd:		root
smmsp:		root
postfix:	root
netdump:	root
ldap:		root
squid:		root
ntp:		root
mysql:		root
desktop:	root
rpcuser:	root
rpc:		root
nfsnobody:	root

ingres:		root
system:		root
toor:		root
manager:	root
dumper:		root
abuse:		root

newsadm:	root #news
newsadmin:	root #news
usenet:		root #news
ftpadm:		root #ftp
ftpadmin:	root #ftp
ftp-adm:	root #ftp
ftp-admin:	root #ftp
www:		webmaster
webmaster:	root
noc:		root
security:	root
hostmaster:	root
#info:		postmaster
#marketing:	postmaster
#sales:		postmaster
#support:	postmaster


# trap decode to catch security attacks
decode:		root

# Person who should get roots mail
#root:		marc
'

## TODO alternatives set postfix as default MTA - or newaliases wont work.
newaliases



fi ## set aliases.db



## To create proper SMTPD Auth proxy method http://www.postfix.org/SASL_README.html
## saslauthd can verify the SMTP client credentials by using them to log into an IMAP server. 
## If the login succeeds, SASL authentication also succeeds. saslauthd contacts an IMAP server when started like this: saslauthd -d -a rimap -O test.d250.hu
## the remote server - in the container - needs to have dovecot (or an IMAP server) with users to authenticate.

## saslauthd and perdition - incompability problem as of 2014.06.25 
## 
## saslauthd with rimap to perdition ...
## The response after LOGIN is not being processed correctly.
## Perdition sends the CAPABILITY before the OK, thus saslauthd returns 
## [reason=[ALERT] Unexpected response from remote authentication server] 
## .. and fails to authenticate.
##
## A workaround is to patch saslauthd.
## We can consider CAPABILITY equal to OK [CAPABILITY ...], as in case of bad password / bad username / bad host, the remote server rejects the credentials.
## That means, if the response is not a NO, and there is a response, we can assume its an OK.
##
## cyrus-sasl-2.1.26/saslauthd/auth_rimap.c last lines:
## replace: return strdup(RESP_UNEXPECTED);
## with: return strdup("OK remote authentication successful"); 
## .. compile, install.
##
## Some more dev-hints.
##
## The LOGIN command is supported on both, saslauthd and perdition, plaintext only on saslauthd.
## Here is a note how to enable plaintext in dovecot:
## disable_plaintext_auth = no  >>> /etc/dovecot 10-auth.conf 
## ssl = no >>> 10-ssl.conf 
## testing the running saslauthd: testsaslauthd -u tx -p xxxxxx
##
## Get base64 encoded login code for user x pass xxxxxx
## echo -en "\0x\0xxxxxx" | base64
## AHgAeHh4eHh4
##
##
## Send e-mail
## echo "this is the body" | mail -s "this is the subject" "to@address"
##
## Other test commands:
##
#### plaintext IMAP connaction test
## telnet test.d250.hu 143
## a AUTHENTICATE PLAIN
## + base64_code
##
#### IMAP4S connection test
## openssl s_client -crlf -connect test.d250.hu:993
## a LOGIN user passwd
##
#### SASL commands
## saslauthd -a rimap -O localhost
## saslauthd -d -a rimap -O localhost
## testsaslauthd -u username -p password
## testsaslauthd -u x -p xxxxxx
## testsaslauthd -u x@test.d250.hu -p xxxxxx
##
#### SMTPS connection test 
## openssl s_client -connect test.d250.hu:465
## EHLO d250.hu
## AUTH PLAIN
## base64_code
##
## exit from telnet Ctrl-AltGr-G quit
##
## TODO: this information is submitted to the cyrus sasl devel mailing list. keep an eye on it.
## for now we will aply a customization in the next step.


## IMAP4S proxy
if [ ! -f /etc/perdition/perdition.conf ] || $all_arg_set
then

	log "Install perdition, with custom service files: imap4.service, imap4s.service, pop3s.service"

	yum -y install perdition
	##   + vanessa_logger vanessa_socket

	## perdition is run as template.service by default.
	## we use our own unit files and service names.

	set_file /etc/perdition/perdition.conf '#### srvctl tuned perdition.conf
## Logging settings

# Turn on verbose debuging.
#debug
#quiet

# Log all comminication recieved from end-users or real servers or sent from perdition.
# Note: debug must be in effect for this option to take effect.

connection_logging

log_facility mail

## Basic settings

## NOTE: possibly listen only on the external-facing interface, and local-dovecot only on 127.0.0.1
bind_address 0.0.0.0 

domain_delimiter @


#### IMPORTANT .. the symbolic link .so.0 does not work. Full path is needed to real file.
map_library /usr/lib64/libperditiondb_posix_regex.so.0.0.0
map_library_opt /etc/perdition/popmap.re

no_lookup

ok_line "Reverse-proxy IMAP4S service lookup OK!"

## If no matches found in popmap.re
outgoing_server localhost

strip_domain remote_login

## For the default dovecot config, no ssl verification is needed
ssl_no_cert_verify
ssl_no_cn_verify

ssl_no_cn_verify

## SSL files
'$no_ca_bundle_hashmark'ssl_ca_chain_file /etc/perdition/ca-bundle.pem
ssl_cert_file /etc/perdition/crt.pem
ssl_key_file /etc/perdition/key.pem

## ...

'

	set_file /etc/perdition/popmap.re '#### srvctl tuned popmap.re

# (.*)@'$(hostname)': localhost

## you may add email domains here that should be located at localhost.

(.*)@(.*): $2
'

## srvctl custom unit files to make it work with different pid files.

mkdir -p /var/run/perdition

set_file /usr/lib/systemd/system/imap4.service '[Unit]
Description=Perdition IMAP4 reverse proxy
After=syslog.target network.target

[Service]
Type=forking
PIDFile=/var/run/perdition/perdition-imap4.pid
EnvironmentFile=-/etc/sysconfig/perdition
ExecStart=/usr/sbin/perdition.imap4 --pid_file /var/run/perdition/perdition-imap4.pid --protocol IMAP4 --ssl_mode tls_outgoing --bind_address 127.0.0.1

[Install]
WantedBy=multi-user.target
'

set_file /usr/lib/systemd/system/imap4s.service '[Unit]
Description=Perdition IMAP4S reverse proxy
After=syslog.target network.target

[Service]
Type=forking
PIDFile=/var/run/perdition/perdition-imap4s.pid
EnvironmentFile=-/etc/sysconfig/perdition
ExecStart=/usr/sbin/perdition.imap4s --pid_file /var/run/perdition/perdition-imap4s.pid --protocol IMAP4S

[Install]
WantedBy=multi-user.target
'

set_file /usr/lib/systemd/system/pop3s.service '[Unit]
Description=Perdition POP3S reverse proxy
After=syslog.target network.target

[Service]
Type=forking
PIDFile=/var/run/perdition/perdition-pop3s.pid
EnvironmentFile=-/etc/sysconfig/perdition
ExecStart=/usr/sbin/perdition.pop3s --pid_file /var/run/perdition/perdition-pop3s.pid --protocol POP3S

[Install]
WantedBy=multi-user.target
'

set_file /etc/sasl2/smtpd.conf 'pwcheck_method: saslauthd
mech_list: LOGIN'


	cat /root/ca-bundle.pem > /etc/perdition/ca-bundle.pem
	cat /root/crt.pem > /etc/perdition/crt.pem
	cat /root/key.pem > /etc/perdition/key.pem

	## saslauthd
	if ! diff /root/saslauthd /usr/sbin/saslauthd >/dev/null ; then
	 	rm -fr /usr/sbin/saslauthd
		cp /root/saslauthd /usr/sbin/saslauthd
		chmod 755 /usr/sbin/saslauthd
		saslauthd -v
	fi

	bak /etc/sysconfig/saslauthd

	set_file /etc/sysconfig/saslauthd '# Directory in which to place saslauthds listening socket, pid file, and so
# on.  This directory must already exist.
SOCKETDIR=/run/saslauthd

# Mechanism to use when checking passwords.  Run "saslauthd -v" to get a list
# of which mechanism your installation was compiled with the ablity to use.
MECH=rimap

# Additional flags to pass to saslauthd on the command line.  See saslauthd(8)
# for the list of accepted flags.
FLAGS="-O localhost -r"'

	systemctl daemon-reload

	systemctl stop imap4.service
	systemctl enable imap4.service
	systemctl start imap4.service
	systemctl status imap4.service

	systemctl stop imap4.service
	systemctl enable imap4s.service
	systemctl start imap4s.service
	systemctl status imap4s.service

	systemctl stop pop3s.service
	systemctl enable pop3s.service
	systemctl start pop3s.service
	systemctl status pop3s.service

	systemctl stop saslauthd.service
	systemctl enable saslauthd.service
	systemctl start saslauthd.service
	systemctl status saslauthd.service

fi ## install perdition
## @update-install

## configure DNS server
if [ ! -f /etc/named.conf ] || $all_arg_set
then
	log "Installing BIND (named) DNS server."

	yum -y install bind bind-utils

	set_file /etc/named.conf '// srvctl generated named.conf

options {
    listen-on port 53 { any; };
    listen-on-v6 port 53 { any; };
    directory 	"/var/named";
    dump-file 	"/var/named/data/cache_dump.db";
    statistics-file "/var/named/data/named_stats.txt";
    memstatistics-file "/var/named/data/named_mem_stats.txt";
    allow-query     { any; };
    recursion yes;
    dnssec-enable yes;
    dnssec-validation yes;
    dnssec-lookaside auto;
    bindkeys-file "/etc/named.iscdlv.key";
    managed-keys-directory "/var/named/dynamic";
};

logging {
        channel default_debug {
                file "data/named.run";
                severity dynamic;
        };
};

zone "." IN {
    type hint;
    file "named.ca";
};

include "/etc/named.rfc1912.zones";
include "/etc/named.root.key";

include "/etc/srvctl/named.conf.local";
'

set_file /etc/srvctl/named.conf.local '## srvctl generated 
'

	rsync -a /usr/share/doc/bind/sample/etc/named.rfc1912.zones /etc
	rsync -a /usr/share/doc/bind/sample/var/named /var
	mkdir -p /var/named/dynamic

	chown -R named:named /var/named

fi ## install named
## @update-install

## TODO: firewall-config. open ports permanently

## TODO IF install dovecot, add listen = 127.0.0.1 to dovecot.conf
## and enable
  # Postfix smtp-auth ### ENABLE with srvctl!
  #unix_listener /var/spool/postfix/private/auth {
  #  mode = 0666
  #}



## User tools

if [ ! -f /etc/freshclam.conf ] || $all_arg_set
then
	log "Installing Userspace tools."

	msg "Clamav antivirus"
	yum -y install clamav clamav-update
	sed_file /etc/freshclam.conf "Example" "### Exampl."
	sed_file /etc/freshclam.conf "#DNSDatabaseInfo current.cvd.clamav.net" "DNSDatabaseInfo current.cvd.clamav.net"

	msg "Tigervnc server"
	yum -y install tigervnc-server

	msg "Version managers"
	yum -y install mercurial
	yum -y install git

fi


## public ftp server
# yum -y install vsftpd
# systemctl enable vsftpd.service
# systemctl start vsftpd.service

## public torrent seed
# yum -y install opentracker-ipv4 opentracker-ipv6
# systemctl enable opentracker-ipv4.service
# systemctl start opentracker-ipv4.service
# yum -y install qbittorrent

## TODO run clamscan ...




scd=/root/srvctl-devel
if [ ! -d $scd ] 
then
	log "Creating srvctl-shortcuts in $scd"
	## some quick links for root
	## this has no real imporance so it can be any directory for your convinience
	mkdir -p $scd

	ln -s $SRV $scd/$SRV
	ln -s /etc/hosts $scd/hosts	
	ln -s /etc/pound.cfg $scd/pound.cfg

	ln -s /usr/local/etc/lxc/lxc.conf $scd/lxc.conf
	ln -s /usr/local/share/lxc/templates/lxc-fedora-srv $scd/lxc-fedora-srv
	ln -s /usr/local/var/cache/lxc/fedora $scd/cache-lxc-fedora 
fi


if [ -s /root/.ssh/authorized_keys  ]
then
  sed_file /etc/ssh/sshd_config "PasswordAuthentication yes" "PasswordAuthentication no"
else
  msg "Password based ssh login couldnt be disabled, no authorized keys."
fi

## @update-install
## installation / configuration should be done.
log "Running updates"

freshclam
yum -y update

ok
fi ## update-install

## This is mainly for dev! This should be disabled in production!
if [ "$CMD" == "reset-install" ]
then

	### As I said, ONLY if you really need this.
	#log "WARNING! Command disabled."
	#exit

	for C in $(ls $SRV)
	do
		lxc-stop -k -n $C
	done

	rm -rf $SRV/*
	# rm -rf /root/.ssh/known_hosts
	rm -rf /etc/srvctl
	rm -rf /root/srvctl
	rm -rf /var/srvctl

	systemctl stop pound.service

	echo '127.0.0.1		localhost.localdomain localhost' > /etc/hosts
	echo '::1		localhost6.localdomain6 localhost6' >> /etc/hosts

	echo 'DONE!'

ok
fi




#### srvctl run functions


function set_is_running {
	## argument container
	_c=$C

	if [ ! -z "$1" ]
	then
		_c=$1
	fi	


	info=$(lxc-info -s -n $_c)
	state=${info:16}
	if [ "$state" == "RUNNING" ]
	then
	  is_running=true
	else
	  is_running=false
	fi
}


function get_info {

	printf ${NC}"%-48s"${NC} $C
}

function get_ip {

	ipv4=''
	ip=$(cat $SRV/$C/config.ipv4)

	if [ -z $ip ] 
	then
	  ipv4=$(grep "lxc.network.ipv4" $SRV/$C/config)
	  ip=${ipv4:19:-2}
	  echo $ip > $SRV/$C/config.ipv4
	fi

	printf ${NC}"%-14s"${NC} $ip

}

function get_state {

	ms='STOPPED'

	if [ -f $SRV/$C/disabled ]
	then
		ms='DISABLED'
	fi

	pcs=''
	msc=${red}	

	ip=$(cat $SRV/$C/config.ipv4)

	info=$(lxc-info -s -n $C)
	state=${info:16}

	if [ "$state" == "RUNNING" ] && [ ! -z "$ip" ]
	then
	ping_ms=$(ping -r -I srv-net -W 1 -c 1 $ip | grep rtt) 
	msc=$green
	ms=${ping_ms:23:5}"ms"
	else
	ms=$state
	fi
	
	printf ${msc}"%-10s"${NC} $ms


}

function get_pound_state {

	ps='none'
	if [ ! -z $ip ] && [ "$(systemctl is-active pound.service)" = "active" ]
	then
	  ps=$(poundctl -c /var/lib/pound/pound.cfg | grep $ip'' | tail -c 5)
	  
	fi
	printf ${yellow}"%-5s"${NC} $ps

}

function get_disk_usage {

	du=$(du -hs $SRV/$C | head -c 4 )

	printf ${yellow}"%-5s"${NC} $du
}

function get_dig_A {

	dig_A=$(dig +time=1 +short $C)	

	if [ "$dig_A" == "$HOSTIPv4" ]
	then
		printf ${yellow}"%-3s"${NC} "OK"
	else
		printf ${red}"%-3s"${NC} "??"
	fi


	#dig=$(nslookup $C | grep -A 3 answer | tail -n 2 | head -n 1)

	#printf ${yellow}"%-16s"${NC} ${dig_result}
}

function get_dig_MX {

	dig_MX=$(dig +time=1 +short $(dig +time=1 +short $C MX | cut -d \  -f 2))
	

	if [ "$dig_MX" == "$HOSTIPv4" ]
	then
		printf ${yellow}"%-3s"${NC} "OK"
	else
		printf ${red}"%-3s"${NC} "??"
	fi
}

function get_users {

	touch $SRV/$C/users

	users=$(cat $SRV/$C/users | sed ':a;N;$!ba;s/\n/|/g')

	printf ${yellow}"%-16s"${NC} ${users:0:16}
}

function get_http_response {

	#indexpage_curl=$(curl -s $C)

	#indexpage_tag=$(echo $indexpage_curl | grep "<title>")

	#indexpage_title=$(curl -s $C | grep "<title>")

	curli=$(curl -s -I http://$C | head -n 1)
	resp=${curli:9:3}	
	
	if [ "$resp" == "200" ]
	then 
	  resp_color=$green
	else
	  resp_color=$red
	fi

	printf ${resp_color}"%-4s"${NC} "$resp"

}

function nfs_share_html {
	## or user $U on container $C
		
	set_is_running
	if $is_running
	then
		## share via NFS

		if [ ! -z "$(rpcinfo -p $C | grep nfs)" ] && [ -z "$(mount | grep /home/$U/$C/html )" ]
		then			
			mkdir -p /home/$U/$C/html 
			msg "Mounting NFS share at /home/$U/$C/html"
			mount -t nfs $C:/var/www/html /home/$U/$C/html 
		fi 
	fi
}

function nfs_share {

	if [ -f $SRV/$C/users ]
	then
		for U in $(cat $SRV/$C/users)
		do
			nfs_share_html
		done
	fi
}

function nfs_unmount {
	## or user $U on container $C
	##umount $C:/var/www/htm

	if [ -f $SRV/$C/users ]
	then
		for U in $(ls /home)
		do
			if [ -d /home/$U/$C/html ] 
			then
				umount $U /home/$U/$C/html
				rm -rf /home/$U/$C/html
			fi 
		done
	fi
}

## report status
hint "status	" "Report status of containers."
if [ "$CMD" == "status" ] 
then
	echo ''

	printf ${yellow}"%-10s"${NC} "RESPONSE"
	printf ${yellow}"%-48s"${NC} "HOSTNAME"
	
	echo ''

 for C in $(lxc-ls)
 do
	get_state
	get_info

	echo ''
 done

	echo ''

ok	
fi

## report status of all details
hint "status-all	" "Detailed container and system health status report."
if [ "$CMD" == "status-all" ] 
then
	echo "Hostname: "$(hostname)
	echo "Uptime:   "$(uptime)
	free -h | head -n 2

	echo ''
	printf ${yellow}"%-10s"${NC} "STATUS"
	printf ${yellow}"%-48s"${NC} "HOSTNAME"
	printf ${yellow}"%-14s"${NC} "IP-LOCAL"
	printf ${yellow}"%-3s"${NC} "IN"
	printf ${yellow}"%-3s"${NC} "MX"	
	printf ${yellow}"%-5s"${NC} "DISK"
	printf ${yellow}"%-16s"${NC} "USERs"
	printf ${yellow}"%-5s"${NC} "HTTP"
	printf ${yellow}"%-4s"${NC} "RES"


	echo ''

 for C in $(lxc-ls)
 do

	get_state
	get_info
	get_ip
	get_dig_A
	get_dig_MX
	get_disk_usage
	get_users
	get_pound_state
	get_http_response




	echo ''
 done

	echo ''

ok	
fi

## start
hint "start VE	" "Start a container."
if [ "$CMD" == "start" ]
then
	set_file_limits
	
	argument C	

	set_is_running
	
	if [ ! -f $SRV/$C/disabled ] && ! $is_running
	then
	  printf ${yellow}"%-10s"${NC} "STARTED"	
	else
	  get_state
	fi	

	get_info

	if [ ! -f $SRV/$C/disabled ] && ! $is_running
	then
	  lxc-start -n $C -d
	fi
	
	nfs_share

	echo ''
ok
fi

## startall
hint "start-all	" "Start all containers and services."
if [ "$CMD" == "start-all" ]
then

	set_file_limits

	for C in $(lxc-ls)
	do


		set_is_running
	
		if [ ! -f $SRV/$C/disabled ] && ! $is_running
		then
		  printf ${yellow}"%-10s"${NC} "STARTED"	
		else
		  get_state
		fi	

		get_info

		if [ ! -f $SRV/$C/disabled ] && ! $is_running
		then
		  lxc-start -n $C -d
		fi
	
		sleep 3

		nfs_share

		echo ''
	

	done

ok
fi

## stop
hint "stop VE	" "Stop a container." 
if [ "$CMD" == "stop" ]
then

	argument C

	nfs_unmount

	set_is_running

	if $is_running
	then
	  printf ${yellow}"%-10s"${NC} "SHUTDOWN"	
	else 
	get_state
	fi

	get_info

	if $is_running
	then
	  ssh $C shutdown -P now
	fi
	
	echo ''		

ok
fi ## stop

## stop-all
hint "stop-all	" "Stop all containers." 
if [ "$CMD" == "stop-all" ]
then
	for C in $(lxc-ls)
	do

		nfs_unmount

		set_is_running

		if $is_running
		then
		  printf ${yellow}"%-10s"${NC} "SHUTDOWN"	
		else 
		get_state
		fi

		get_info

		if $is_running
		then
		  ssh $C shutdown -P now
		fi

		echo ''	

	done	

ok
fi ## stop-all

## kill
hint "kill VE	" "Force all containers to stop."
if [ "$CMD" == "kill" ]
then
	argument C

	nfs_unmount

	set_is_running

	if $is_running
	then
	  printf ${yellow}"%-10s"${NC} "KILLING"		
	else
	get_state
	fi

	get_info

	if $is_running
	then
	  lxc-stop -k -n $C
	fi

	echo ''	
ok
fi

## kill-all
hint "kill-all	" "Force all containers to stop."
if [ "$CMD" == "kill-all" ]
then

	for C in $(lxc-ls)
	do
		nfs_unmount

		set_is_running

		if $is_running
		then
		  printf ${yellow}"%-10s"${NC} "KILLING"		
		else
		get_state
		fi

		get_info

		if $is_running
		then
		  lxc-stop -k -n $C
		fi

		echo ''	
	

	done

ok
fi

## reboot VE
hint "reboot VE	" "Restart a container."
if [ "$CMD" == "reboot" ]
then
	argument C
	
	nfs_unmount

	set_is_running

	if $is_running
	then
	  printf ${yellow}"%-10s"${NC} "REBOOT!"	
	else 
	get_state
	fi

	get_info

	if $is_running
	then
	  ssh $C reboot
	fi

	nfs_share

	echo ''	
ok
fi

## reboot all
hint "reboot-all	" "Restart all containers."
if [ "$CMD" == "reboot-all" ]
then

 for C in $(lxc-ls)
 do

	nfs_unmonut

	set_is_running

	if $is_running
	then
	  printf ${yellow}"%-10s"${NC} "REBOOT!"	
	else 
	get_state
	fi

	get_info

	if $is_running
	then
	  ssh $C reboot
	fi


	
	sleep 6

	nfs_share

	echo ''	
 done

ok
fi


## exec-all 'something' (or with "")ssh  
hint "exec-all 'CMD [..]'" "Execute a command on all running containers."
if [ "$CMD" == "exec-all" ]
then

argument comm

 for C in $(lxc-ls)
 do
	set_is_running

	if $is_running
	then
	ssh $C "$comm"
	fi

	get_ip
	get_pound_state
	get_state
	get_info

	echo ''	

 done

ok
fi

### regenerate-related functions

function regenerate_config_files {

	for _C in $(lxc-ls)
	do

		if [ ! -f $SRV/$_C/config.counter ]
		then
			err "No config.counter for $_C!"
		fi

		if [ ! -f $SRV/$_C/config.ipv4 ] || [ ! -f $SRV/$_C/config ] || $all_arg_set
		then
			generate_lxc_config $_C
		fi

		if [ ! -f $SRV/$_C/users ]
		then
			echo '' > $SRV/$_C/users 
		fi

		##_ip=$(cat $SRV/$_C/config.ipv4)	

	done
}


function regenerate_etc_hosts {

	msg "regenerate etc_hosts" ## fist in $TMP
	echo '# srvctl generated' > $TMP/hosts
	echo '127.0.0.1		localhost.localdomain localhost' >> $TMP/hosts
	echo '::1		localhost6.localdomain6 localhost6' >> $TMP/hosts
	echo '' >> $TMP/hosts
	echo '' > $TMP/relaydomains

	for _C in $(lxc-ls)
	do

		ip=$(cat $SRV/$_C/config.ipv4)




		if [ -z $ip ] 
		then
			err "ERROR tmp: hosts - MISSING IP ADDRESS: "$_C
		else

	 	  echo $ip'		'$_C >>  $TMP/hosts
		  echo $ip'		mail.'$_C >>  $TMP/hosts
		  echo $_C' #' >>  $TMP/relaydomains

			if [ -f /$SRV/$_C/aliases ]
			then
				for A in $(cat /$SRV/$_C/aliases)
				do
					#msg "$A is an alias of $_C"
	 	  			echo $ip'		'$A >>  $TMP/hosts
		  			echo $ip'		mail.'$A >>  $TMP/hosts
					echo $A' #' >>  $TMP/relaydomains
				
				done
			fi

		  echo ''  >>  $TMP/hosts


		fi
	done ## regenerated etc_hosts

	bak /etc/hosts
	rsync -a $TMP/hosts /etc

	bak /etc/postfix/relaydomains
	rsync -a $TMP/relaydomains /etc/postfix/relaydomains
	postmap /etc/postfix/relaydomains

} 

function scan_host_key {
	## argument: Container
	
	msg "Scanning host key for "$1

	## TODO in the next line the container name may be better if not indicated.
	echo "# "$1 > $SRV/$C/host-key
	ssh-keyscan -t rsa -H $(cat $SRV/$1/config.ipv4) >> $SRV/$1/host-key 2>/dev/null
	ssh-keyscan -t rsa -H $1 >> $SRV/$1/host-key 2>/dev/null
	echo '' >> $SRV/$1/host-key	
				
}

function regenerate_known_hosts {

	msg "regenerate known hosts"

	echo '## srvctl generated ..' > /root/.ssh/srvctl_hosts
	 
	for _C in $(lxc-ls)
	do
		if [ ! -f $SRV/$_C/host-key ] || $all_arg_set
		then

			set_is_running $_C
			if $is_running
			then

				scan_host_key $_C
			else
		 		err "VE is STOPPED, No host-key for: "$_C
				## host	key is needed for .ssh/known-hosts
			fi
			
					
		fi

		if [ -f $SRV/$_C/host-key ]
		then
			cat $SRV/$_C/host-key >> /root/.ssh/srvctl_hosts
		fi

	done ## regenerated  containers hosts
	
	echo '## .. srvctl generated' >> /root/.ssh/srvctl_hosts

	## apply srvctl-known_hosts to root
	if [ -f /root/.ssh/own_hosts ]
	then
		cat /root/.ssh/own_hosts > /root/.ssh/known_hosts
		cat /root/.ssh/srvctl_hosts >> /root/.ssh/known_hosts
	else
		cat /root/.ssh/srvctl_hosts > /root/.ssh/known_hosts
	fi

}


function regenerate_pound_files {

	msg "regenerate pound files"

	rm -rf /var/pound
	mkdir -p /var/pound

	## We will use a sort of layering, with up to 8 layers. 
	
	## We assume that /etc/pound.cfg has two includes ...
	echo $MSG > /var/pound/http-includes.cfg
	echo $MSG > /var/pound/https-includes.cfg
	echo $MSG > /var/pound/https-certificates.cfg

	echo $MSG > /var/pound/http-8-domains.cfg
	echo $MSG > /var/pound/http-7-domains.cfg
	echo $MSG > /var/pound/http-6-domains.cfg
	echo $MSG > /var/pound/http-5-domains.cfg
	echo $MSG > /var/pound/http-4-domains.cfg
	echo $MSG > /var/pound/http-3-domains.cfg
	echo $MSG > /var/pound/http-2-domains.cfg
	echo $MSG > /var/pound/http-1-domains.cfg

	echo $MSG > /var/pound/https-8-domains.cfg
	echo $MSG > /var/pound/https-7-domains.cfg
	echo $MSG > /var/pound/https-6-domains.cfg
	echo $MSG > /var/pound/https-5-domains.cfg
	echo $MSG > /var/pound/https-4-domains.cfg
	echo $MSG > /var/pound/https-3-domains.cfg
	echo $MSG > /var/pound/https-2-domains.cfg
	echo $MSG > /var/pound/https-1-domains.cfg

	echo 'Include "/var/pound/https-certificates.cfg"' >> /var/pound/https-includes.cfg
	
	echo 'Include "/var/pound/http-8-domains.cfg"' >> /var/pound/http-includes.cfg
	echo 'Include "/var/pound/http-7-domains.cfg"' >> /var/pound/http-includes.cfg
	echo 'Include "/var/pound/http-6-domains.cfg"' >> /var/pound/http-includes.cfg
	echo 'Include "/var/pound/http-5-domains.cfg"' >> /var/pound/http-includes.cfg
	echo 'Include "/var/pound/http-4-domains.cfg"' >> /var/pound/http-includes.cfg
	echo 'Include "/var/pound/http-3-domains.cfg"' >> /var/pound/http-includes.cfg
	echo 'Include "/var/pound/http-2-domains.cfg"' >> /var/pound/http-includes.cfg
	echo 'Include "/var/pound/http-1-domains.cfg"' >> /var/pound/http-includes.cfg

	echo 'Include "/var/pound/https-8-domains.cfg"' >> /var/pound/https-includes.cfg
	echo 'Include "/var/pound/https-7-domains.cfg"' >> /var/pound/https-includes.cfg
	echo 'Include "/var/pound/https-6-domains.cfg"' >> /var/pound/https-includes.cfg
	echo 'Include "/var/pound/https-5-domains.cfg"' >> /var/pound/https-includes.cfg
	echo 'Include "/var/pound/https-4-domains.cfg"' >> /var/pound/https-includes.cfg
	echo 'Include "/var/pound/https-3-domains.cfg"' >> /var/pound/https-includes.cfg
	echo 'Include "/var/pound/https-2-domains.cfg"' >> /var/pound/https-includes.cfg
	echo 'Include "/var/pound/https-1-domains.cfg"' >> /var/pound/https-includes.cfg



	## $_C is the local version of $C
	for _C in $(lxc-ls)
	do


		# echo "@ "$_C
		cfg_dir=/var/pound/$_C
		mkdir -p $cfg_dir

		mkdir -p $SRV/$_C/cert
		cp -r $SRV/$_C/cert $cfg_dir

		for d in $( find $cfg_dir/cert -maxdepth 1 -type d )
		do

			### Import each certificate if test passes

			# echo "# "$d
			if [ ! -f $d/pound.pem ]
			then
				## TODO check if this is overcomplicated
				## No ready-to-go pound.pem found, attemting to generate one. 
				## either from some.key and some.crt 
				cat $d/*.crt 2> /dev/null >> $d/pound.pem
				echo '' >> $d/pound.pem
				cat $d/*.key 2> /dev/null >> $d/pound.pem
				echo '' >> $d/pound.pem
				## or from a concrete key.pem and crt.pem
				cat $d/crt.pem 2> /dev/null >> $d/pound.pem
				echo '' >> $d/pound.pem
				cat $d/key.pem 2> /dev/null >> $d/pound.pem
				echo '' >> $d/pound.pem
				## and a ca-bundle.
				cat $d/ca-bundle.pem 2> /dev/null >> $d/pound.pem	
			fi
			
			flag_ca_bundle=" "
			if [ -f $d/ca-bundle.pem ]
			then
				flag_ca_bundle=" -CAfile $d/ca-bundle.pem "
			fi

			cert_status=$(openssl verify $flag_ca_bundle $d/pound.pem 2> /dev/null | tail -n 1 | tail -c 3)

			if [ "$cert_status" == "OK" ]
			then 
				## echo "VALID CERT FOUND"
				echo 'Cert "'$d'/pound.pem"' >> /var/pound/https-certificates.cfg
			else
				## echo "CERT INVALID"
				bak $d/pound.pem
				rm -rf $d/pound.pem
			fi

		done

		## create configs
		_ip=$(cat $SRV/$_C/config.ipv4)		
		_http_port=80

		## custom directive
		if [ -f $SRV/$_C/pound-http-port ]
		then
			_http_port=$(cat $SRV/$_C/pound-http-port)
		fi

		for A in $(echo $_C && cat /$SRV/$_C/aliases 2> /dev/null)
		do

			set_file $cfg_dir/$A-service '## srvctl '$_C' '$_ip'
			Service
				  HeadRequire "Host: .*'$A'.*"
				  BackEnd
				      Address '$_C'
				      Port    '$_http_port'
				  End
			End'

			http=$A-service
			https=$A-service

			if [ -f $SRV/$_C/pound-no-http ]
			then
	
				set_file $cfg_dir/$A-no-http-service '## srvctl '$_C' '$_ip'
				Service
					  HeadRequire "Host: .*'$A'.*"
					  Redirect "https://'$A'"
				End'
				http=$A-no-http-service
			fi


			if [ -f $SRV/$_C/pound-redirect ] && [ ! -z $(cat $SRV/$_C/pound-redirect) ]
			then
	
				set_file $cfg_dir/$A-redirect-service '## srvctl '$_C' '$_ip'
				Service
					  HeadRequire "Host: .*'$A'.*"
					  Redirect "https://'$(cat $SRV/$_C/pound-redirect)'"
				End'
				http=$A-redirect-service
				https=$A-redirect-service
			fi


			if [ ${A:0:4} == "dev." ] 
			then
			  
			 	## msg "Setting up as developer-domain. ( translating port 9001 to 443)."

				set_file $cfg_dir/$A-service-dev '## srvctl '$_C'
				Service
					  HeadRequire "Host: .*'$A'.*"
					  BackEnd
					      Address '$_C'
					      Port    9001
					      TimeOut 300
					  End
				End'

				https=$A-service-dev
			fi
		
			##
			## Other customizations might come here
			##

			## dnl will count the dots in the domain
			dnl=$(echo $A | grep -o "\." | grep -c "\.")

			## finally inlcude the demanded service
			echo 'Include "'$cfg_dir/$http'"' >> /var/pound/http-$dnl-domains.cfg
			echo 'Include "'$cfg_dir/$https'"' >> /var/pound/https-$dnl-domains.cfg

		done ## for C and aliases


		## if there is some problem, start an automatic debug process, that skips broken configs
		if [ "$1" == "debug" ]
		then
			
			systemctl restart pound.service
			test=$(systemctl is-active pound.service)

			if [ "$test" == "active" ]
			then
				msg "$_C pound OK"
				
				## Ok, make a backup of this state.
				cat /var/pound/http-includes.cfg > /var/pound/http-includes.lok
				cat /var/pound/https-includes.cfg > /var/pound/https-includes.lok
				cat /var/pound/https-certificates.cfg > /var/pound/https-certificates.lok

				cat /var/pound/http-8-domains.cfg > /var/pound/http-8-domains.lok
				cat /var/pound/http-7-domains.cfg > /var/pound/http-7-domains.lok
				cat /var/pound/http-6-domains.cfg > /var/pound/http-6-domains.lok
				cat /var/pound/http-5-domains.cfg > /var/pound/http-5-domains.lok
				cat /var/pound/http-4-domains.cfg > /var/pound/http-4-domains.lok
				cat /var/pound/http-3-domains.cfg > /var/pound/http-3-domains.lok
				cat /var/pound/http-2-domains.cfg > /var/pound/http-2-domains.lok
				cat /var/pound/http-1-domains.cfg > /var/pound/http-1-domains.lok

				cat /var/pound/https-8-domains.cfg > /var/pound/https-8-domains.lok
				cat /var/pound/https-7-domains.cfg > /var/pound/https-7-domains.lok
				cat /var/pound/https-6-domains.cfg > /var/pound/https-6-domains.lok
				cat /var/pound/https-5-domains.cfg > /var/pound/https-5-domains.lok
				cat /var/pound/https-4-domains.cfg > /var/pound/https-4-domains.lok
				cat /var/pound/https-3-domains.cfg > /var/pound/https-3-domains.lok
				cat /var/pound/https-2-domains.cfg > /var/pound/https-2-domains.lok
				cat /var/pound/https-1-domains.cfg > /var/pound/https-1-domains.lok


			else
				## Error in this config, skip it, ..

				cat /var/pound/http-includes.lok > /var/pound/http-includes.cfg
				cat /var/pound/https-includes.lok > /var/pound/https-includes.cfg
				cat /var/pound/https-certificates.lok > /var/pound/https-certificates.cfg

				cat /var/pound/http-8-domains.lok > /var/pound/http-8-domains.cfg
				cat /var/pound/http-7-domains.lok > /var/pound/http-7-domains.cfg
				cat /var/pound/http-6-domains.lok > /var/pound/http-6-domains.cfg
				cat /var/pound/http-5-domains.lok > /var/pound/http-5-domains.cfg
				cat /var/pound/http-4-domains.lok > /var/pound/http-4-domains.cfg
				cat /var/pound/http-3-domains.lok > /var/pound/http-3-domains.cfg
				cat /var/pound/http-2-domains.lok > /var/pound/http-2-domains.cfg
				cat /var/pound/http-1-domains.lok > /var/pound/http-1-domains.cfg

				cat /var/pound/https-8-domains.lok > /var/pound/https-8-domains.cfg
				cat /var/pound/https-7-domains.lok > /var/pound/https-7-domains.cfg
				cat /var/pound/https-6-domains.lok > /var/pound/https-6-domains.cfg
				cat /var/pound/https-5-domains.lok > /var/pound/https-5-domains.cfg
				cat /var/pound/https-4-domains.lok > /var/pound/https-4-domains.cfg
				cat /var/pound/https-3-domains.lok > /var/pound/https-3-domains.cfg
				cat /var/pound/https-2-domains.lok > /var/pound/https-2-domains.cfg
				cat /var/pound/https-1-domains.lok > /var/pound/https-1-domains.cfg
				
				log "$_C Pound restart FAILED!"
				systemctl status pound.service
			fi
			sleep 3
		fi
		


	done ## foreach container

	systemctl restart pound.service

	test=$(systemctl is-active pound.service)

	if [ "$test" == "active" ]
	then
		msg "Restarted pound.service."
	else
		## pound syntax check
		pound -c -f /etc/pound.cfg

		err "Pound restart FAILED!"
		systemctl status pound.service

		msg "Debbuging pound configuration..."
		regenerate_pound_files debug
	fi

}

function regenerate_root_configs {

#echo "Checking root's .ssh configs"

### User checks
	## for root
	if [ ! -f /root/.ssh/id_rsa.pub ]
	then
	  err "ERROR - NO KEYPAIR FOR ROOT!"
	fi

	if [ ! -f /root/.ssh/authorized_keys ]
	then
	  err "WARNING - NO authorized_keys FOR ROOT!"
	  #echo '' >> /root/.ssh/authorized_keys
	fi

}

function regenerate_users {
	## First of all, make sure all users we have defined for sites, are all present.
	msg "regenarating user-list"
	for _C in $(lxc-ls)
	do
		touch $SRV/$_C/users

		for _U in $(cat $SRV/$_C/users)
		do		
			# echo "User: $U at $C"
		
			## if the user doesent exists ... well, create it.
			add_user $_U
		done
	done
}

function generate_user_configs {
	
	# echo "Generating user configs for $U"

	## create keypair
	if [ ! -f /home/$U/.ssh/id_rsa.pub ]
	then
	  msg "Creating keypair for user "$U
	  create_keypair
	fi

	## create known_hosts

	## TODO should users have their own_hosts file?
	cat /root/.ssh/srvctl_hosts > /home/$U/.ssh/known_hosts
	chown $U:$U /home/$U/.ssh/known_hosts

	mkdir -p /root/srvctl-users/authorized_keys
	## create user submitted authorised_keys
	if [ ! -f /home/$U/.ssh/authorized_keys ] || $all_arg_set
	then
		#log "Creating authorized_keys for $U"  
		cat /root/.ssh/authorized_keys > /home/$U/.ssh/authorized_keys
		echo '' >> /home/$U/.ssh/authorized_keys
		if [ -f  /root/srvctl-users/authorized_keys/$U ]
		then
			cat /root/srvctl-users/authorized_keys/$U >> /home/$U/.ssh/authorized_keys
		else
			msg "No authorized ssh-rsa key in /root/srvctl-users/authorized_keys/$U"
		fi		
		chown $U:$U /home/$U/.ssh/authorized_keys
	fi
}


function regenerate_users_configs {

	msg "regenrateing user configs"

	for U in $(ls /home)
	do
		generate_user_configs
	done 
}

function generate_user_structure ## for user $U, Container $C
{
	# echo  "Generating user structure for $U in $C"

		## add users local public key to container root user - for ssh access.
		if [ -f /home/$U/.ssh/id_rsa.pub ]
		then
			bak $SRV/$C/rootfs/root/.ssh/authorized_keys
			cat /home/$U/.ssh/id_rsa.pub >> $SRV/$C/rootfs/root/.ssh/authorized_keys
		else
			err "No id_rsa.pub for user "$U
		fi

		## Share via mount
		## Second, create common share
		mkdir -p /home/$U/$C/mnt
		chown $U:$U /home/$U/$C
		chown $U:$U /home/$U/$C/mnt

		mkdir -p $SRV/$C/rootfs/mnt/$U

		## everything prepared, this is the thing.
		echo "/home/$U/$C/mnt $SRV/$C/rootfs/mnt/$U none rw,bind 0 0" >> $SRV/$C/fstab

		
}

function regenerate_users_structure {

	msg "Updateing user-structure."
	
	for C in $(lxc-ls)
	do

		cat /root/.ssh/id_rsa.pub > $SRV/$C/rootfs/root/.ssh/authorized_keys
		chmod 600 $SRV/$C/rootfs/root/.ssh/authorized_keys

		echo "/var/srvctl $SRV/$C/rootfs/var/srvctl none ro,bind 0 0" > $SRV/$C/fstab
	
		for U in $(cat $SRV/$C/users)
		do
			generate_user_structure
			nfs_share_html
		done

		for U in $(ls /home)
		do
			if [ -f /root/srvctl-users/authorized_keys/$U ]
			then
				cat /root/srvctl-users/authorized_keys/$U > /home/$U/.ssh/authorized_keys
			fi
		done

 	done
}

function regenerate_dns {
	
	msg "Regenerate DNS - named/bind configs"

	rm -rf /var/named/srvctl/*

	named_conf_local=$TMP/named.conf.local
	 named_slave_conf_global=$TMP/named.slave.conf.global.$(hostname)

	echo '## srvctl named.conf.local' > $named_conf_local
	echo '## srvctl named.slave.conf.global.'$(hostname) > $named_slave_conf_global

	for C in $(lxc-ls)
	do
		create_named_zone $C
		echo 'include "/var/named/srvctl/'$C'.conf";' >> $named_conf_local
		echo 'include "/var/named/srvctl/'$C'.slave.conf";' >> $named_slave_conf_global

		if [ -f /$SRV/$C/aliases ]
		then
			for A in $(cat /$SRV/$C/aliases)
			do
				#msg "$A is an alias of $C"
				create_named_zone $A
				echo 'include "/var/named/srvctl/'$A'.conf";' >> $named_conf_local
				echo 'include "/var/named/srvctl/'$A'.slave.conf";' >> $named_slave_conf_global
			
			done
		fi

	done

	bak /etc/srvctl/named.conf.local
	bak /etc/srvctl/named.slave.conf.global.$(hostname)

	rsync -a $named_conf_local /etc/srvctl
	rsync -a $named_slave_conf_global /etc/srvctl

	## update this variable as it was synced to its real location
	named_slave_conf_global=/etc/srvctl/named.slave.conf.global.$(hostname)

	systemctl restart named.service


	test=$(systemctl is-active named.service)

	if [ "$test" == "active" ]
	then
		msg "Creating DNS share."

		## to make sure everything is correct we regenerate the dns share too
		rm $dns_share
		tar -czPf $dns_share $named_slave_conf_global /var/named/srvctl

	else
		err "DNS Error."
		systemctl status named.service
	fi

}

## regenerate configs 
hint "regenerate [all]	" "Regenerate configuration files, and restart affected services."
if [ "$CMD" == "regenerate" ]
then

	if [ "$2" == "all" ]
	then
	   all_arg_set=true
	fi

	regenerate_config_files

	regenerate_etc_hosts 

	regenerate_known_hosts

	regenerate_pound_files

	regenerate_root_configs

	regenerate_users 

	regenerate_users_configs

	regenerate_users_structure

	regenerate_dns

ok
fi ## regenerate




## reMOVE host
hint "remove VE	" "Remove a container."
if [ "$CMD" == "remove" ]
then

	argument C 

	lxc-stop -k -n $ARG

	## remove from known_hosts ... regenerate?

	if [ -d "$SRV/$C" ]; then
	  echo "Container folder does exists"
	  ## trash it! .. to TMP

	  rsync -a $SRV/$C $TMP
	  rm -fr $SRV/$C

	fi

	## TODO regenerate everything
	regenerate_pound_files
	restart_pound

ok
fi ## reMOVE

## add new host
hint "add VE [USERNAME]	" "Add new container."
if [ "$CMD" == "add" ] && $onHS
then

	argument C 

	if [ -d $SRV/$C ]; then
	  err "$SRV/$C already exists! Exiting"
	  exit 11
	fi

	## $C - container / domain name
	C=$(echo $C | grep -P '(?=^.{6,254}$)(^(?:(?!\d+\.)[a-zA-Z0-9_\-]{1,63}\.?)+(?:[a-zA-Z]{2,})$)')
	## Is'nt it a FQDN?

	if [ -z "$C" ]
	then
	  err "$C failed the domain regexp check. Exiting."
	  exit 10
	fi

	counter=$(($(cat /etc/srvctl/counter)+1))
	echo $counter >  /etc/srvctl/counter

	log "Create container. $counter"
	## templates are usually in /usr/local/share/lxc/templates, lxc-fedora-srv has to be installed!
	lxc-create -n $C -t fedora-srv

	log "Container created."
	## TODO check, if it really is.

	#mkdir -p $SRV/$C 
	echo $counter > $SRV/$C/config.counter

	generate_lxc_config $C

	IPv4="10.10."$(to_ip $counter)
	rootfs=$SRV/$C/rootfs

	## make root access
	mkdir -m 600 $rootfs/root/.ssh
	cat /root/.ssh/id_rsa.pub > $rootfs/root/.ssh/authorized_keys
	chmod 600 $rootfs/root/.ssh/authorized_keys

	## Add IP to hosts file
	echo "$IPv4		$C"  >> /etc/hosts
	echo "$IPv4		mail.$C"  >> /etc/hosts
	echo ""  >> /etc/hosts

	## set (fix) hostname
	echo $C > $rootfs/etc/hostname

	## Container should be in the same timezone as the host.
	rsync -a /etc/localtime $rootfs/etc

	## make the installation smaller	
	rm $rootfs/usr/lib/locale/locale-archive
	mkdir -p $rootfs/var/srvctl
	mkdir -p $rootfs/etc/srvctl

set_file $rootfs/etc/srvctl/config '## srvctl generated
## MYSQL / MARIADB conf file that stores the mysql root password - in containers
MDF="'$MDF'"

## for php.ini in containers
php_timezone="'$php_timezone'"

## IPv4 Address ## TODO: dig command not available on a minimal-container, get it with: $(dig +time=1 +short $(hostname))
HOSTIPv4="'$HOSTIPv4'"
'

	ln -s /var/srvctl/locale-archive $rootfs/usr/lib/locale/locale-archive 
	
	rm -rf $rootfs/var/cache/yum/*

	## add symlink to client-srvctl
	ln -s /var/srvctl/srvctl $rootfs/bin/srvctl

	## As of June 2014, systemd-journald is running amok in the containers. To prevent 100% CPU usage, it has to be disabled.
	## To undo, you may run: rm $rootfs/etc/systemd/system/systemd-journald.service
	## Or, in the containers mask / unmask journald.service - reboot container to apply.
	ln -s '/dev/null' "$rootfs/etc/systemd/system/systemd-journald.service"

	## create shortcut's in root's folder, so user dont get lost in the filesystem.
	ln -s /var/www/html $rootfs/root

## Sendmail

	## set containers sendmail que directory in order to allow apache to use php's mail function. (Didnt find a better way yet.) 
	chmod 773 $rootfs/var/spool/clientmqueue

## Postfix

	## Container should have the same aliases as the host. (Important here is to disable info)
	rsync -a /etc/aliases $rootfs/etc
	rsync -a /etc/aliases.db $rootfs/etc

	echo '

# srvctl configuration
## Listen on ..
inet_interfaces = all

## If required Catch all mail defined in ..
# virtual_alias_maps = hash:/etc/postfix/catchall

## And send it to ..
home_mailbox = Maildir/

## Max 25MB mail size
message_size_limit=26214400


	' >> $rootfs/etc/postfix/main.cf

	echo "@$C root" > $rootfs/etc/postfix/catchall
	postmap $rootfs/etc/postfix/catchall

	echo "$C #"  >> /etc/postfix/relaydomains
	postmap /etc/postfix/relaydomains

	ln -s '/usr/lib/systemd/system/postfix.service' $rootfs'/etc/systemd/system/multi-user.target.wants/postfix.service'

## NFS
	## We export /var/www/html - with apache user rights
	set_file  $rootfs/etc/exports '## srvctl 
/var/www/html 10.10.0.1(rw,all_squash,anonuid=48,anongid=48)
'
	## enable nfs
	ln -s '/usr/lib/systemd/system/nfs.service' $rootfs'/etc/systemd/system/multi-user.target.wants/nfs.service'

## Apache

	## enable the webserver
	ln -s '/usr/lib/systemd/system/httpd.service' $rootfs'/etc/systemd/system/multi-user.target.wants/httpd.service'



	##ln -s '/usr/lib/systemd/system/mariadb.service' $rootfs'/etc/systemd/system/multi-user.target.wants/mariadb.service'
	##ln -s '/usr/lib/systemd/system/dovecot.service' $rootfs'/etc/systemd/system/multi-user.target.wants/dovecot.service'


	
	## set default index page 
	index=$rootfs/var/www/html/index.html
	echo '<head></head><body bgcolor="#333"><div id="header" style="background-color:#151515;">
	<img src="logo.png" alt="'"$CMP"'" style="display: block; margin-left: auto; margin-right: auto; vertical-align: middle"></div>
	<p align="center"><font color="#aaa" style="margin-left: auto; margin-right: auto" size="6px" face="Arial">' > $index
	echo '<b>'$C'</b> @ '$(hostname) >> $index
	echo '</font><p></body>' >> $index

	cp /var/www/html/logo.png $rootfs/var/www/html
	cp /var/www/html/favicon.ico $rootfs/var/www/html
	chown -R apache:apache  $rootfs/var/www/html

## Pound


	create_certificate
	
	regenerate_pound_files
	

## DNS

	named_slave_conf_global=/etc/srvctl/named.slave.conf.global.$(hostname)

	create_named_zone $C
	echo 'include "/var/named/srvctl/'$C'.conf";' >> /etc/srvctl/named.conf.local
	echo 'include "/var/named/srvctl/'$C'.slave.conf";' >> $named_slave_conf_global

	rm $dns_share
	tar -czPf $dns_share $named_slave_conf_global /var/named/srvctl

	## what user?
	U=$3
	echo "$U" > $SRV/$C/users

	if [ ! -z "$U" ]
	then
		add_user $U
		generate_user_configs
		generate_user_structure
	fi

## 	#### START #### 

	log "Starting container $C - $IPv4 $U"	

	lxc-start -o $SRV/$C/lxc.log -n $C -d 

	## wait 120 sec max for the container to get up
	
	n=0
        while [  $n -lt 120 ] 
	do
		res=$(ssh-keyscan -t rsa -H $IPv4 2> /dev/null)

		if [ "${res:0:3}" == '|1|' ]
		then
			n=120
		fi

	 	let n=n+1 
		echo -n '.'
        done

	echo " connected."

	scan_host_key $C

	regenerate_known_hosts

	echo "Post installation, ..."

## Dovecot - due to an error in yum, it has to be installed in the container after it has started.

	ssh $C "yum -y install dovecot"
	ssh $C "systemctl enable dovecot.service"
	ssh $C "systemctl start dovecot.service"

	if [ ! -z "$U" ]
	then
		nfs_share_html

	fi

	msg "$C ready."

ok
fi ## srvctl add


fi ## Server Side functions


######################################
##
##    CLIENT FUNCTIONS 
##
######################################


if $onVE
then

C=$(hostname)

##ln -s /var/srvctl/srvctl /bin/srvctl

###
###	MariaDB related client-functions
###

function setup_mariadb {

	## TODO connection check

	yum -y install mariadb mariadb-server
	systemctl enable mariadb.service
	systemctl start mariadb.service

	systemctl status mariadb.service

	msg "Secureing Mysql/MariaDB."	
	MDA="-u root"

	get_password

	mysql $MDA -e "DELETE FROM mysql.user WHERE User='';"
	mysql $MDA -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');"
	mysql $MDA -e "DROP DATABASE IF EXISTS test;"

	SQL="UPDATE mysql.user SET Password=PASSWORD('$password') WHERE User='root'; flush privileges;"
	mysql $MDA -e "$SQL"
	log "Set database root password to: "$password

	bak $MDF

	## set up backup params
	echo '[client]' > $MDF
	echo 'user=root' >> $MDF
	echo 'password='$password >> $MDF
}


## Add new database
function add_mariadb_db {

	## input $dbd database-definition - basically the database name.
	## $MDA MaridaDB / MysqlDatabase - Argument	

	if [ -z "$dbd" ]
	then
			if [ -z "$1" ]
			then
				dbd=$(cat /etc/hostname)
			else
				dbd=$1
			fi
	fi
	
	dbd=$(echo $dbd | tr '.' '_' | tr '-' '_')

	get_password
	db_usr=${dbd:0:15}
	db_name=${dbd:0:63}
	db_pwd=$password

	SQL="CREATE DATABASE IF NOT EXISTS $db_name;"
	mysql $MDA -e "$SQL"
	echo $SQL

	SQL="GRANT ALL ON $db_name.* TO '$db_usr'@'localhost' IDENTIFIED BY '$db_pwd'; flush privileges;"
	mysql $MDA -e "$SQL"
	echo $SQL

	## save these params to etc
	f=/etc/mysqluser.conf
	echo "dbf:"$db_name >> $f
	echo "usr:"$db_usr >> $f
	echo "pwd:"$db_pwd >> $f
	
	echo "Added MariaDB database $db_name  $db_usr:$db_pwd"
}


##  Stay in client functions, .. but skip identation. (tabbing)
test=$(systemctl is-active mariadb.service)

if [ "$test" == "active" ]
then
	  
	## Mariadb / mysql default argument with the defaults-file.

	if [ ! -f "$MDF" ]
	then

		setup_mariadb
	
	fi


	hint "import-db DATABASE" "Import a mysql database."
	if [ "$CMD" == "import-db" ] 
	then

		argument db

		mysql $MDA < $db

		mysql $MDA -e "show databases;"

	ok
	fi ## import db



	hint "add-db DATABASE" "Add a new database."
	if [ "$CMD" == "add-db" ] 
	then

		argument db_name

		get_password

		db_usr=$db_name 
		db_pwd=$password

		SQL="CREATE DATABASE IF NOT EXISTS $db_name"
		echo $SQL
		mysql $MDA -e "$SQL"


		SQL="GRANT ALL ON *.* TO '$db_usr'@'localhost' IDENTIFIED BY '$db_pwd'; flush privileges;"
		echo $SQL
		mysql $MDA -e "$SQL"

		## save these params
		conf=/etc/mysqluser.conf
		echo 'dbf:'$db_name >> $conf
		echo 'usr:'$db_usr >> $conf
		echo 'pwd:'$db_pwd >> $conf


	ok
	fi ## add-db


	hint "reset-db-root-passwd" "Reset Database root password."
	if [ "$CMD" == "reset-db-root-passwd" ] 
	then

		get_password

		test=$(mysql $MDA -e "show databases" | grep Database)

		if [ "$test" == "Database" ] 
		then
			echo "The database is accessible."
		else
			echo "Could not enter database! "

			systemctl stop mysqld.service
			sleep 1
			mysqld_safe --skip-grant-tables &
			sleep 10

			test=$(mysql $MDA -e "show databases" | grep Database)
			if [ "$test" == "Database" ] 
			then
				echo "Re-entered database in safe mode."
			else
				echo "ERROR. Could not re-enter mysql!"
			exit
			fi

		fi

		log "Set MariaDB database root password to: $password"
		SQL="UPDATE mysql.user SET Password=PASSWORD('$password') WHERE User='root'; flush privileges;"
		mysql $MDA -e "$SQL"


		## set up backup params

		echo '[client]' > $MDF
		echo 'user=root' >> $MDF
		echo 'password='$password >> $MDF

		echo "Rebooting the container."
		reboot

	ok
	fi ## reset-db-root-password

	hint "backup-db [clean]" "Create a backup of the Mysql/MariaDB database, Optionally clean older backups."
	if [ "$CMD" == "backup-db" ] 
	then

		log "Creating backup of Mysql/Mariadb databases."

		old_backup=$(ls -d /root/backup/*)

		BACKUP_POINT="/root/backup/"$(date +%Y_%m_%d__%H_%M_%S)
		mkdir -p $BACKUP_POINT

		## All Databases into a single file?
		# mysqldump $MDA --all-databases >$BACKUP_POINT/all-databases.sql

		succ=1
		## create backup for each database
		for i in `echo "show databases" | mysql $MDA | grep -v Database`; do 
		    if [ "$i" != "information_schema" ] && [ "$i" != "performance_schema" ] 
		    then 
		    mysqldump $MDA --databases $i > $BACKUP_POINT/$i.sql
		    if [ "$?" -eq 0 ]
		     then
			 echo "OK:   "$i
			else
			 echo "ERROR "$i
			 echo $err
			 succ=0
			fi
		    fi
		done

		if [ $succ -gt 0 ]
		then
		    echo 'All databases have a backup in '$BACKUP_POINT

		    if [ "$2" == "clean" ]
		    then
		     rm -fr $old_backup
		    fi
		fi
	ok
	fi ## backup db

	hint "add-phpmyadmin" "Set up phpmyadmin."
	if [ "$CMD" == "add-phpmyadmin" ] 
	then

		yum -y install phpmyadmin

		## grant access.
		## This will grant passwordless setup!		
		#sed_file /etc/httpd/conf.d/phpMyAdmin.conf "       Require ip 127.0.0.1" "       Require all granted"
		#sed_file /etc/httpd/conf.d/phpMyAdmin.conf "       Require ip ::1" "       #Require ip ::1"

		## instead, use this custom conf for Apache 2.4
		set_file /etc/httpd/conf.d/phpMyAdmin.conf "# phpMyAdmin - Web based MySQL browser written in php

		Alias /phpMyAdmin /usr/share/phpMyAdmin
		Alias /phpmyadmin /usr/share/phpMyAdmin

		<Directory /usr/share/phpMyAdmin/>
		   <IfModule mod_authz_core.c>
		     <RequireAny>
		       Require all granted
		     </RequireAny>
		   </IfModule>
		</Directory>

		<Directory /usr/share/phpMyAdmin/setup/>
		   <IfModule mod_authz_core.c>
		     # Apache 2.4
		     <RequireAny>
		       Require ip ::1
		     </RequireAny>
		   </IfModule>
		</Directory>
		"
		systemctl reload httpd.service
	ok
	fi

	hint "mysql [CMD..]	" "Enter mariadb/mysql as root, or execute SQL command."
	if  [ "$CMD" == "mysql" ]
	then
		if [ -z "$2" ]
		then
			mysql $MDA
		else
			mysql $MDA -e "$2" 
		fi 
	ok
	fi

else

	hint "setup-mariadb	" "install MariaDB (mysql) database."
	if [ "$CMD" == "setup-mariadb" ] 
	then	
		setup_mariadb
	ok
	fi ## setup mariadb

fi ## MariaDB related fuctions


if [ ${C:0:4} == "dev." ] 
then

	hint "add-codepad	" "Install ep_codepad, an Etherpad based collaborative code editor."
	if [ "$CMD" == "add-codepad" ]
	then

		#setup_mariadb

		MDA="--defaults-file=$MDF -u root"

		## install packages
		yum -y install nodejs
		yum -y install npm
		yum -y install gzip git-core curl python openssl-devel
		yum -y install postgresql-devel
		yum -y install mariadb mariadb-server

		if [ ! -d "/home/codepad-user" ]; then
			adduser codepad-user
		fi
		## folder to run etherpad from
	
		## get the latest version
		su codepad-user -c "cd /home/codepad-user && git clone git://github.com/ether/etherpad-lite.git"	
		su codepad-user -c "cd /home/codepad-user/etherpad-lite && npm install ep_codepad"
		su codepad-user -c "cd /home/codepad-user/etherpad-lite && npm install ep_cursortrace"
		
		## increase import filesize limitation
		sed_file /home/codepad-user/etherpad-lite/src/node/db/PadManager.js '    if(text.length > 100000)' '    if(text.length > 1000000) /* srvctl customization for file import via webAPI*/'
		
		### The line containing:  return /^(g.[a-zA-Z0-9]{16}\$)?[^$]{1,50}$/.test(padId); .. but mysql is limited to 100 chars, so patch it.
		sed_file /home/codepad-user/etherpad-lite/src/node/db/PadManager.js '{1,50}$/.test(padId);' '{1,100}$/.test(padId); /* srvctl customization for file import via webAPI*/'



		#su codepad-user -c "mkdir /home/codepad-user/dev-data"

		ln -s /var/www/html /home/codepad-user/dev-data 

		## for sessionkey
		get_randomstr

		## codepad/etherpad uses mysql
		dbd=$(echo ${C:4} | tr "." "_")

		add_mariadb_db

		get_password
		adminpass=$password

		get_password
		develpass=$password


set_file /home/codepad-user/etherpad-lite/settings.json '/* ep_codepad-devel settings*/
{
  "ep_codepad": { 
    "project_path": "/home/codepad-user/dev-data",
    "play_url": "http://'$C'"
  },
  "title": "'$C'",
  "favicon": "favicon.ico",
  "ip": "0.0.0.0",
  "port" : 9001,
  "sessionKey" : "'$randomstr'",
  "dbType" : "dirty",
"dbType" : "mysql",
"dbSettings" : {
    "user"    : "'$db_usr'",
    "host"    : "localhost",
    "password": "'$db_pwd'",
    "database": "'$db_name'"
},
  "defaultPadText" : "Welcome to Etherpad-codepad @ '$C'...",
  "requireSession" : false,
  "editOnly" : false,
  "minify" : true,
  "maxAge" : 21600, 
  "abiword" : null,
  "requireAuthentication": true,
  "requireAuthorization": false,
  "trustProxy": false,
  "disableIPlogging": false,  
  "users": {
	"admin": {"password": "'$adminpass'","is_admin": true},
	"user" : {"password": "'$develpass'","is_admin": false}
  },
  "socketTransportProtocols" : ["xhr-polling", "jsonp-polling", "htmlfile"],
  "loglevel": "INFO",
  "logconfig" :
    { "appenders": [
        { "type": "console"}
      ]
    }
}'
	chown codepad-user:codepad-user /home/codepad-user/etherpad-lite/settings.json

## We copuld run this, but that bahaves strange
#su codepad-user -c "/home/codepad-user/etherpad-lite/bin/run.sh &"

## proper was is to create a service
set_file /lib/systemd/system/codepad.service '
[Unit]
Description=Run Codepad, the collaborative code editor.
After=syslog.target network.target

[Service]
Type=simple
ExecStart=/home/codepad-user/etherpad-lite/bin/run.sh

[Install]
WantedBy=multi-user.target

'
	systemctl daemon-reload

	systemctl enable codepad.service
	systemctl start codepad.service
		 
	echo "admin pass is $adminpass @ https://$C/admin"	

	ok
	fi ## codepad

fi ## if dev.


hint "add-wordpress [path]" "Install Wordpress. Optionally to a folder (URI)."
if [ "$CMD" == "add-wordpress" ]
then
		yum -y install wordpress

		MDA="--defaults-file=$MDF -u root"

		URI=$2

		if [ -z $URI ]
		then
			dir=/var/www/html
			dbd=$(cat /etc/hostname | cut -f1 -d"." )'_wp'
			bak /var/www/html/index.html
			rm -rf /var/www/html/index.html
		else	
			mkdir /var/www/html/$URI
			dir=/var/www/html/$URI
			dbd=$(cat /etc/hostname | cut -f1 -d"." )'_wp_'$URI		
		fi

		## for dependencies.
		yum -y install unzip
		yum -y install wordpress

		## set containers timezone in php.ini, ...  	
		sed_file $rootfs/etc/php.ini ";date.timezone =" "date.timezone = $php_timezone"


		wd=/root
		curl http://wordpress.org/latest.zip > $wd/latest.zip
	
		unzip $wd/latest.zip -d $wd >> $wd/unzip.log
		cp -u -f -r $wd/wordpress/* $dir
		rm -rf $wd/latest.zip
		rm -rf $wd/wordpress
		rm -rf $wd/unzip.log
		chown -R apache:apache $dir
	
		cf=$dir/wp-config.php

		add_mariadb_db	

		## save these params to the wp folder
		f=$dir/wp-config.php
		echo "<?php" > $f
		echo "// srvctl wordpress wp-config" >> $f
		echo "define('DB_NAME', '$db_name');" >> $f
		echo "define('DB_USER', '$db_usr');" >> $f
		echo "define('DB_PASSWORD', '$db_pwd');" >> $f	
		echo "define('DB_HOST', 'localhost');" >> $f
		echo "define('DB_CHARSET', 'utf8');" >> $f
		echo "define('DB_COLLATE', '');" >> $f
		echo "" >> $f	

		## random key's and salt's
		get_randomstr
		echo "define('AUTH_KEY',         '$randomstr');" >> $f
		get_randomstr
		echo "define('SECURE_AUTH_KEY',  '$randomstr');" >> $f
		get_randomstr
		echo "define('LOGGED_IN_KEY',    '$randomstr');" >> $f
		get_randomstr
		echo "define('NONCE_KEY',        '$randomstr');" >> $f
		get_randomstr
		echo "define('AUTH_SALT',        '$randomstr');" >> $f
		get_randomstr
		echo "define('SECURE_AUTH_SALT', '$randomstr');" >> $f
		get_randomstr
		echo "define('LOGGED_IN_SALT',   '$randomstr');" >> $f
		get_randomstr
		echo "define('NONCE_SALT',       '$randomstr');" >> $f

		echo "" >> $f

		echo '$'"table_prefix  = 'wp_';" >> $f
		echo "" >> $f

		echo "define('WPLANG', '');" >> $f
		echo "define('WP_DEBUG', false);" >> $f
		echo "" >> $f

		echo "if ( !defined('ABSPATH') ) define('ABSPATH', dirname(__FILE__) . '/');" >> $f
		echo "require_once(ABSPATH . 'wp-settings.php');" >> $f
		echo "" >> $f

		echo "" >> $f

		## create an installer to install without web dialog
		f=$dir/wp-install.php
		echo "<?php" > $f
		echo "// srvctl wordpress wp-install" >> $f
		echo "define('WP_SITEURL', 'http://"$(hostname)"/"$URI"');" >> $f
		echo "define('WP_INSTALLING',true);" >> $f
		#echo "define('ABSPATH','/var/www/html/"$URI"/');" >> $f
		echo "require_once('$dir/wp-config.php');" >> $f
		echo "require_once('$dir/wp-settings.php');" >> $f
		echo "require_once('$dir/wp-admin/includes/upgrade.php');" >> $f
		echo "require_once('$dir/wp-includes/wp-db.php');" >> $f
		get_password
		echo "wp_install('"$(hostname)"','admin','root@localhost',1,'','"$password"');" >> $f		
		
		php -f $f

		cf=/etc/httpd/conf.d/wp-prettyurl.conf

		echo '## srvctl generated' >> $cf
		echo '<Directory /var/www/html>' >> $cf
		echo ' <IfModule mod_rewrite.c>' >> $cf
		echo '  RewriteEngine On' >> $cf
		echo '  RewriteBase /'$URI'/' >> $cf
		echo '  RewriteCond %{REQUEST_FILENAME} !-f' >> $cf
		echo '  RewriteCond %{REQUEST_FILENAME} !-d' >> $cf
		echo '  RewriteRule . /index.php [L]' >> $cf
		echo ' </IfModule>' >> $cf
		echo '</Directory>' >> $cf
		echo '' >> $cf

		systemctl restart httpd.service

		echo $password > $dir/.admin

		log "Wordpress instance installed. https://"$(hostname)"/$URI/wp-admin admin:$password"
		
		## URGENT TODO: fix https for wordpress behind pound
ok
fi ## install-wordpress

hint "add-joomla [path]" "Install the latest Joomla! "
if [ "$CMD" == "add-joomla" ]
then	


		MDA="--defaults-file=$MDF -u root"

		URI=$2

		if [ -z $URI ]
		then
			dir=/var/www/html
			dbd=$(cat /etc/hostname | cut -f1 -d"." )'_ja'
			bak /var/www/html/index.html
			rm -rf /var/www/html/index.html
		else	
			rm -rf /var/www/html/$URI
			mkdir /var/www/html/$URI
			dir=/var/www/html/$URI
			dbd=$(cat /etc/hostname | cut -f1 -d"." )'_ja_'$URI		
		fi
	
		wd=/root/joomla
		mkdir $wd
		
		joomla_dl=http://`curl http://www.joomla.org/download.html | grep "Stable-Full_Package.zip" |  grep -Po '^.*?\K(?<=http://).*?(?=.zip)' | grep -m 1 download`.zip
		curl $joomla_dl > $wd/latest.zip 		

		## for dependencies.
		yum -y install unzip php php-common php-gd php-mcrypt php-pear php-pecl-memcache php-mhash php-mysql php-xml php-mbstring

		## set containers timezone in php.ini, ...  	
		sed_file $rootfs/etc/php.ini ";date.timezone =" "date.timezone = $php_timezone"

		unzip $wd/latest.zip -d $wd >> $wd/unzip.log
		rm -rf $wd/latest.zip
		rm -rf $wd/unzip.log
		cp -u -f -r $wd/* $dir
		rm -rf $wd
		chown -R apache:apache $dir

		add_mariadb_db

		f=$dir/configuration.php
		echo "<?php" > $f
		echo "class JConfig {" >> $f
		echo "	public \$offline = '0';" >> $f
		echo "	public \$offline_message = 'This site is down for maintenance.<br /> Please check back again soon.';" >> $f
		echo "	public \$display_offline_message = '1';" >> $f
		echo "	public \$offline_image = '';" >> $f
		echo "	public \$sitename = '"$(hostname)"';" >> $f
		echo "	public \$editor = 'tinymce';" >> $f
		echo "	public \$captcha = '0';" >> $f
		echo "	public \$list_limit = '20';" >> $f
		echo "	public \$access = '1';" >> $f
		echo "	public \$debug = '0';" >> $f
		echo "	public \$debug_lang = '0';" >> $f
		echo "	public \$dbtype = 'mysqli';" >> $f
		echo "	public \$host = 'localhost';" >> $f
		echo "	public \$user = '$db_usr';" >> $f
		echo "	public \$password = '$db_pwd';" >> $f
		echo "	public \$db = '$db_name';" >> $f
		echo "	public \$dbprefix = 'jos_';" >> $f
		echo "	public \$live_site = '';" >> $f
		get_randomstr
		echo "	public \$secret = '$randomstr';" >> $f
		echo "	public \$gzip = '0';" >> $f
		echo "	public \$error_reporting = 'default';" >> $f
		echo "	public \$helpurl = 'http://help.joomla.org/proxy/index.php?option=com_help&amp;keyref=Help{major}{minor}:{keyref}';" >> $f
		echo "	public \$ftp_host = '';" >> $f
		echo "	public \$ftp_port = '';" >> $f
		echo "	public \$ftp_user = '';" >> $f
		echo "	public \$ftp_pass = '';" >> $f
		echo "	public \$ftp_root = '';" >> $f
		echo "	public \$ftp_enable = '';" >> $f
		echo "	public \$offset = 'UTC';" >> $f
		echo "	public \$mailonline = '1';" >> $f
		echo "	public \$mailer = 'mail';" >> $f
		echo "	public \$mailfrom = 'joomla@"$(hostname)"';" >> $f
		echo "	public \$fromname = '"$(hostname)"';" >> $f
		echo "	public \$sendmail = '/usr/sbin/sendmail';" >> $f
		echo "	public \$smtpauth = '0';" >> $f
		echo "	public \$smtpuser = '';" >> $f
		echo "	public \$smtppass = '';" >> $f
		echo "	public \$smtphost = 'localhost';" >> $f
		echo "	public \$smtpsecure = 'none';" >> $f
		echo "	public \$smtpport = '25';" >> $f
		echo "	public \$caching = '0';" >> $f
		echo "	public \$cache_handler = 'file';" >> $f
		echo "	public \$cachetime = '15';" >> $f
		echo "	public \$MetaDesc = '';" >> $f
		echo "	public \$MetaKeys = '';" >> $f
		echo "	public \$MetaTitle = '1';" >> $f
		echo "	public \$MetaAuthor = '1';" >> $f
		echo "	public \$MetaVersion = '0';" >> $f
		echo "	public \$robots = '';" >> $f
		echo "	public \$sef = '1';" >> $f
		echo "	public \$sef_rewrite = '0';" >> $f
		echo "	public \$sef_suffix = '0';" >> $f
		echo "	public \$unicodeslugs = '0';" >> $f
		echo "	public \$feed_limit = '10';" >> $f
		echo "	public \$log_path = '/var/www/html/logs';" >> $f
		echo "	public \$tmp_path = '/var/www/html/tmp';" >> $f
		echo "	public \$lifetime = '15';" >> $f
		echo "	public \$session_handler = 'database';" >> $f
		echo "}" >> $f

		dbf=$dir/installation/sql/mysql/joomla.sql

		sed_file $dbf "#__" "jos_"

		mysql $MDA -e "USE $db_name; source $dbf;"
	
		dbf=$dir/installation/sql/mysql/add-admin.sql

		set_file $dbf 'INSERT INTO `'$db_name'`.`jos_users` (`id`, `name`, `username`, `email`, `password`, `block`, `sendEmail`, `registerDate`, `lastvisitDate`, `activation`, `params`, `lastResetTime`, `resetCount`, `otpKey`, `otep`, `requireReset`)'" VALUES ('939', 'Super User', 'admin', 'root@localhost', MD5('$password'), '0', '1', CURRENT_DATE(), CURRENT_DATE(), '0', '', CURRENT_DATE(), '0', '', '', '0');
"'INSERT INTO `jos_user_usergroup_map` (`user_id`,`group_id`) '"VALUES ('939','8');"

		cat $dbf
		mysql $MDA -e "USE $db_name; source $dbf;"

		rm -rf $dir/installation
		
		echo $password > $dir/.admin

		systemctl restart httpd.service
		
		log "Joomla! installed. https://"$(hostname)"/$URI/administrator admin:$password"

ok
fi ## install-joomla


#hint "mailconf	" "Configure Dovecot / Postfix for email traffic. Catchall to root."
if [ "$CMD" == "mailconf" ]
then

	yum -y install postfix
	yum -y install dovecot

	echo '@'$(hostname)' root' > /etc/postfix/virtual
	postmap /etc/postfix/virtual

## TODO !! .. this will break postfix if those lines already exists.

	echo '# srvctl setup
	## Listen on ..
	#inet_interfaces = all

	## Catch all maildefined in .. (comment it out to disable catchall)
	#virtual_alias_maps = hash:/etc/postfix/virtual

	## And send it to ..
	#home_mailbox = Maildir/
	' >> /etc/postfix/main.cf

	systemctl restart postfix.service
	systemctl restart dovecot.service
	echo "Postfix: "$(systemctl is-active postfix.service)	
	echo "Dovecot: "$(systemctl is-active dovecot.service)
ok
fi ## mailconf




####################################################
## TODO: all these functions need a proper review!! 
## For now, I just leave it as it is ...
## this was used to migrate from ispconfig, but its rather dirty then proper.

if [ "$CMD" == "config" ] && $MDB
then

echo config

## chmod
chown -R apache:apache /var/www/html/*

if [ -f /var/www/html/wp-config.php ]; then
    echo "wp-config.php detected!"

rm -rf /var/www/stats

sed -i 's/\r$//' /var/www/html/wp-config.php

cat /var/www/html/wp-config.php | grep "DB_NAME"
db_db=$(cat /var/www/html/wp-config.php | grep "DB_NAME")
db_dbf=${db_db:19:-3}

## Override
#db_dbf="drdugo_sevsam"

echo $db_dbf


mysql < /var/srvctl/20140324010005/$db_dbf.sql

mysql -u root -e "show databases;"

owner=$(echo $db_dbf | cut -f1 -d"_" )

echo $owner > /etc/owner

cat /var/www/html/wp-config.php | grep "DB_USER"
db_u=$(cat /var/www/html/wp-config.php | grep "DB_USER")
db_usr=${db_u:19:-3}

## Override
#db_usr="drdugo_sevsam"

echo $db_usr

cat /var/www/html/wp-config.php | grep "DB_PASSWORD"
db_p=$(cat /var/www/html/wp-config.php | grep "DB_PASSWORD")
db_pwd=${db_p:23:-3}

## Override
#db_pwd="zt7Er34W"

echo $db_pwd


SQL="GRANT ALL ON *.* TO '$db_usr'@'localhost' IDENTIFIED BY '$db_pwd'; flush privileges;"

echo "(WORDPRESS) $SQL"

mysql -u root -e "$SQL"

fi ## wordpress

if [ -f /var/www/html/configuration.php ]; then
    echo "Joomla configuration.php detected!"

rm -rf /var/www/stats

sed -i 's/\r$//' /var/www/html/configuration.php

cat /var/www/html/configuration.php | grep "db "
db_db=$(cat /var/www/html/configuration.php | grep "db ")
db_dbf=${db_db:12:-2}

## Override
#db_dbf="drdugo_sevsam"

echo $db_dbf


mysql < /var/srvctl/20140324010005/$db_dbf.sql

mysql -u root -e "show databases;"

owner=$(echo $db_dbf | cut -f1 -d"_" )

echo $owner > /etc/owner

cat /var/www/html/configuration.php | grep '$user '
db_u=$(cat /var/www/html/configuration.php | grep '$user ')
db_usr=${db_u:14:-2}

## Override
#db_usr="drdugo_sevsam"

echo $db_usr

cat /var/www/html/configuration.php | grep "password "
db_p=$(cat /var/www/html/configuration.php | grep "password ")
db_pwd=${db_p:18:-2}

## Override
#db_pwd="zt7Er34W"

echo $db_pwd

#exit
SQL="GRANT ALL ON *.* TO '$db_usr'@'localhost' IDENTIFIED BY '$db_pwd'; flush privileges;"

echo "(JOOMLA) $SQL"

mysql -u root -e "$SQL"

mkdir /log

sed_file /var/www/html/configuration.php "log_path = '" "log_path = '/log'; // '"
sed_file /var/www/html/configuration.php "tmp_path = '" "tmp_path = '/tmp'; // '"
chmod 644 /var/www/html/configuration.php

fi ## joomla


## save these params
conf=/etc/mysqluser.conf
echo 'dbf:'$db_dbf > $conf
echo 'usr:'$db_usr >> $conf
echo 'pwd:'$db_pwd >> $conf


cf=/etc/httpd/conf.d/$(hostname).conf

echo '## srvctl generated' >> $cf
echo '<Directory /var/www/html>' >> $cf

cat /var/www/html/.htaccess >> $cf

echo '' >> $cf
echo '</Directory>' >> $cf
echo '' >> $cf

systemctl restart httpd.service

fi ## config-



fi ## on VE

########################################################
##
## 		Finish.
##
########################################################

### thats it. Display help or succes info.
if [ -z "$SUCC" ]
then

 ## check for arguments
 if [ -z "$1" ]
  then
	printf ${red}"No Command."${NC} 
  else
        printf ${red}"Invalid Command."${NC} 
 fi

 echo -e "
 $HINT
 "
else
 echo -e "$SUCC"
fi

## return to the directory we started from.
cd $CSD >> /dev/null 2> /dev/null

exit

########################################################
########################################################

# Sample bash script for DNS slave syncronisation

#!/bin/bash

systemctl stop named.service

rm -rf /root/dns
rm -rf /var/named/srvctl

mkdir -p /root/dns
cd /root/dns
wget https://r2.d250.hu/dns.tar.gz
tar -xf dns.tar.gz
rm -rf /root/dns/dns.tar.gz


mkdir -p /etc/srvctl
mkdir -p /var/named/srvctl
chown -R named:named /var/named/srvctl

rsync -a /root/dns/etc/srvctl/named.slave.conf.global.r2.d250.hu /etc/srvctl
rsync -a /root/dns/var/named/srvctl /var/named

rm -rf /var/named/srvctl/*.zone

systemctl start named.service
systemctl status named.service

 

